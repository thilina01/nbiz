/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.nanosl.nbiz.gui.chart;

//import com.nanosl.nbiz.gui.Bundle;
import static com.nanosl.nbiz.util.Format.nf2d;
import static com.nanosl.nbiz.util.Format.yyyy_MM_dd;
import com.nanosl.nbiz.util.NTopComponent;
import java.awt.BorderLayout;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.embed.swing.JFXPanel;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.chart.PieChart;
import javafx.scene.control.DatePicker;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.VBox;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.nanosl.nbiz.gui//ProfitRanking//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ProfitRankingTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "com.nanosl.nbiz.gui.ProfitRankingTopComponent")
@ActionReference(path = "Menu/Chart" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ProfitRankingAction",
        preferredID = "ProfitRankingTopComponent"
)
@Messages({
    "CTL_ProfitRankingAction=ProfitRanking",
    "CTL_ProfitRankingTopComponent=ProfitRanking Window",
    "HINT_ProfitRankingTopComponent=This is a ProfitRanking window"
})
public final class ProfitRankingTopComponent extends NTopComponent {

    public ProfitRankingTopComponent() {
        setName(Bundle.CTL_ProfitRankingTopComponent());
        setToolTipText(Bundle.HINT_ProfitRankingTopComponent());
        onLoad();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        topTextField = new javax.swing.JTextField();

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ProfitRankingTopComponent.class, "ProfitRankingTopComponent.jLabel1.text")); // NOI18N

        topTextField.setText(org.openide.util.NbBundle.getMessage(ProfitRankingTopComponent.class, "ProfitRankingTopComponent.topTextField.text")); // NOI18N
        topTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(topTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(topTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void topTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topTextFieldActionPerformed
        createChartScene();
    }//GEN-LAST:event_topTextFieldActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField topTextField;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    final JFXPanel panel = new JFXPanel();
    final JFXPanel panel2 = new JFXPanel();
    DatePicker endDatePicker = new DatePicker();
    DatePicker startDatePicker = new DatePicker();

    private void onLoad() {
        initComponents();
        final Calendar c1 = Calendar.getInstance();
        c1.setTime(new Date());
        c1.set(Calendar.DATE, 1);
//        datePicker.setDate(c1.getTime());
        Platform.runLater(new Runnable() {
            @Override
            public void run() {
                panel2.setScene(createCalenderScene());
            }

        });
        createChartScene();
        jPanel1.add(panel, BorderLayout.CENTER);
        jPanel2.add(panel2, BorderLayout.SOUTH);
    }

    private Scene createCalenderScene() {
        VBox vbox = new VBox(20);
        vbox.setStyle("-fx-padding: 10;");
//        Scene scene = new Scene(vbox, 400, 400);
        EventHandler eventHandler = new EventHandler<ActionEvent>() {

            @Override
            public void handle(ActionEvent event) {
                createChartScene();

                event.consume();
            }
        };
        endDatePicker.setValue(LocalDate.now());
        endDatePicker.setOnAction(eventHandler);
        startDatePicker.setOnAction(eventHandler);
        startDatePicker.setValue(endDatePicker.getValue().minusDays(endDatePicker.getValue().getDayOfMonth() - 1));
        GridPane gridPane = new GridPane();
        gridPane.setHgap(10);
        gridPane.setVgap(10);
//
//        Label checkInlabel = new Label("Check-In Date:");
        gridPane.add(startDatePicker, 0, 0);
        gridPane.add(endDatePicker, 1, 0);
//
//        GridPane.setHalignment(checkInlabel, HPos.LEFT);
//        gridPane.add(checkInDatePicker, 0, 1);
        vbox.getChildren().add(gridPane);
        return new Scene(vbox);

    }

    private void createChartScene() {
        Platform.runLater(new Runnable() {
            @Override
            public void run() {

                String x = "SELECT item.description as description, "
                        + "ROUND((sum(sale_invoice_has_item.quantity)) * (sale_invoice_has_item.rate - sale_invoice_has_item.cost),2) as x "
                        + "FROM sale_invoice_has_item "
                        + "INNER JOIN sale_invoice ON sale_invoice_has_item.sale_invoice_inv_no = sale_invoice.inv_no "
                        + "INNER JOIN item ON sale_invoice_has_item.item_code = item.code "
                        + "WHERE "
                        + "sale_invoice.inv_time  BETWEEN '" + yyyy_MM_dd.format(makeStartDate(java.sql.Date.valueOf(startDatePicker.getValue()))) + " 00:00:00' AND '" + yyyy_MM_dd.format(makeEndDate(java.sql.Date.valueOf(endDatePicker.getValue()))) + " 23:59:59' AND item.description != 'OTHER' "
                        + "GROUP BY sale_invoice_has_item.item_code, sale_invoice_has_item.rate, sale_invoice_has_item.cost "
                        + "ORDER BY x DESC "
                        + "LIMIT " + Integer.parseInt(topTextField.getText().trim());
//                System.out.println(x);
                ArrayList<PieChart.Data> pieChartData = new ArrayList<>();
                try (PreparedStatement ps = manager.getConnection().prepareStatement(x)) {
                    ResultSet resultSet = ps.executeQuery();
                    while (resultSet.next()) {
//                        System.out.println(resultSet.getString("description") + " " + nf2d.format(resultSet.getDouble("x")));
//                System.out.print(resultSet.getString("date_only") + " = ");
//                        System.out.println(nf2d.format(resultSet.getDouble("total")));

//                table.getColumns().add(new TableColumn(resultSet.getString("date_only").substring(resultSet.getString("date_only").lastIndexOf("-") + 1)));
                        pieChartData.add(new PieChart.Data(resultSet.getString("description") + " " + nf2d.format(resultSet.getDouble("x")), resultSet.getDouble("x")));
                    }
                } catch (SQLException ex) {
                    Exceptions.printStackTrace(ex);
                }
                final PieChart chart = new PieChart(FXCollections.observableArrayList(pieChartData));
                chart.setTitle("Profit Ranking - " + yyyy_MM_dd.format(makeStartDate(java.sql.Date.valueOf(startDatePicker.getValue()))) + " to " + yyyy_MM_dd.format(java.sql.Date.valueOf(endDatePicker.getValue())));

                Scene scene = new Scene(chart);
                panel.setScene(scene);
            }
        });
    }
}
