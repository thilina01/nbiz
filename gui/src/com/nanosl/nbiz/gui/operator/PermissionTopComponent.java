/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.nanosl.nbiz.gui.operator;

import com.nanosl.nbiz.util.NTopComponent;
import entity.Operator;
import entity.ViewPanel;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.nanosl.nbiz.gui.operator//Permission//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "PermissionTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "com.nanosl.nbiz.gui.operator.PermissionTopComponent")
@ActionReference(path = "Menu/General" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_PermissionAction",
        preferredID = "PermissionTopComponent")
@Messages({
    "CTL_PermissionAction=Permission",
    "CTL_PermissionTopComponent=Permission Window",
    "HINT_PermissionTopComponent=This is a Permission window"
})
public final class PermissionTopComponent extends NTopComponent {

    public PermissionTopComponent() {
        onLoad();
        setName(Bundle.CTL_PermissionTopComponent());
        setToolTipText(Bundle.HINT_PermissionTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        operatorList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        permitedViewList = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        assignButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        availableViewList = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();
        removeButton = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(PermissionTopComponent.class, "PermissionTopComponent.jLabel1.text")); // NOI18N

        operatorList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                operatorListMouseClicked(evt);
            }
        });
        operatorList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                operatorListKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(operatorList);

        jScrollPane2.setViewportView(permitedViewList);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(PermissionTopComponent.class, "PermissionTopComponent.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(assignButton, org.openide.util.NbBundle.getMessage(PermissionTopComponent.class, "PermissionTopComponent.assignButton.text")); // NOI18N
        assignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignButtonActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(availableViewList);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(PermissionTopComponent.class, "PermissionTopComponent.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(removeButton, org.openide.util.NbBundle.getMessage(PermissionTopComponent.class, "PermissionTopComponent.removeButton.text")); // NOI18N
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(assignButton)
                            .addComponent(removeButton)))
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {assignButton, removeButton});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(assignButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(removeButton)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void operatorListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_operatorListMouseClicked
        loadOperatorViews();
        loadAvaliableViews();
    }//GEN-LAST:event_operatorListMouseClicked

    private void operatorListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_operatorListKeyReleased
        loadOperatorViews();
        loadAvaliableViews();
    }//GEN-LAST:event_operatorListKeyReleased

    private void assignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignButtonActionPerformed
        try {
            Operator operator = (Operator) operatorList.getSelectedValue();
            if (operator == null) {
                return;
            }
            Object[] objects = availableViewList.getSelectedValues();
            List<Serializable> ses = new ArrayList<Serializable>();
            for (Object object : objects) {
                ViewPanel viewPanel = (ViewPanel) object;
                viewPanel.getOperatorCollection().add(operator);
                operator.getViewPanelCollection().add(viewPanel);
                ses.add(viewPanel);
            }
            ses.add(operator);
            m.update(ses);
            m.clearCache();
            loadOperatorViews();
            loadAvaliableViews();

        } catch (NullPointerException e) {
            showError("Pleace Sellect values");
        }
    }//GEN-LAST:event_assignButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        removePermission();
    }//GEN-LAST:event_removeButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignButton;
    private javax.swing.JList availableViewList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList operatorList;
    private javax.swing.JList permitedViewList;
    private javax.swing.JButton removeButton;
    // End of variables declaration//GEN-END:variables

    private void loadAvaliableViews() {
        Object o = operatorList.getSelectedValue();
        if (o == null) {
            return;
        }
        Operator operator = (Operator) o;
        operator = m.find(Operator.class, operator.getUsername());
        List<ViewPanel> viewPanels = m.exNamedQueryResult("ViewPanel.findAll");
        List<ViewPanel> blankViewPanels = new ArrayList<ViewPanel>();

        if (operator == null || viewPanels == null) {
            availableViewList.setListData(blankViewPanels.toArray());
            return;
        }

        for (Iterator<ViewPanel> it = viewPanels.iterator(); it.hasNext();) {
            ViewPanel viewPanel = it.next();
            Collection<Operator> operators = viewPanel.getOperatorCollection();
            if (operators.isEmpty()) {
                blankViewPanels.add(viewPanel);
            } else if (!operators.contains(operator)) {
                blankViewPanels.add(viewPanel);
            }
        }
        availableViewList.setListData(blankViewPanels.toArray());
    }

    private void loadOperatorViews() {
        Object o = operatorList.getSelectedValue();
        if (o == null) {
            return;
        }
        Operator operator = (Operator) o;
        operator = m.find(Operator.class, operator.getUsername());
        permitedViewList.setListData(operator.getViewPanelCollection().toArray());
    }

    public void removePermission() {
        Object o = operatorList.getSelectedValue();
        if (o == null) {
            return;
        }
        Operator operator = (Operator) o;
        o = permitedViewList.getSelectedValue();
        if (o == null) {
            return;
        }
        ViewPanel viewPanel = (ViewPanel) o;
        viewPanel.getOperatorCollection().remove(operator);
        operator.getViewPanelCollection().remove(viewPanel);
        m.update(viewPanel);
        m.update(operator);

        loadAvaliableViews();
        loadOperatorViews();
    }

    protected void onLoad() {
        initComponents();
        refresh();
    }

    private void refresh() {
        loadOperators();
        loadAvaliableViews();
        loadOperatorViews();
    }

    private void loadOperators() {
        List<Operator> operators = m.find(Operator.class);
        operatorList.setListData(operators.toArray());
    }

    @Override
    public void componentOpened() {
        refresh();
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
