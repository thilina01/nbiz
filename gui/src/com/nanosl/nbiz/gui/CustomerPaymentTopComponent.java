/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.nanosl.nbiz.gui;

import com.nanosl.lib.date.JXDatePicker;
import com.nanosl.lib.log.Loggings;
import com.nanosl.nbiz.util.Combo;
import com.nanosl.nbiz.util.Convert;
import com.nanosl.nbiz.util.NTopComponent;
import com.nanosl.nbiz.util.PrintViewTopComponent;
import entity.Bank;
import entity.CashBox;
import entity.CashLog;
import entity.CollectionReceipt;
import entity.Customer;
import entity.SaleCash;
import entity.SaleCheque;
import entity.SaleChequePK;
import entity.SaleInvoice;
import java.awt.Component;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.Serializable;
import java.net.URL;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComponent;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.nanosl.nbiz.gui//CustomerPayment//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "CustomerPaymentTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "com.nanosl.nbiz.gui.CustomerPaymentTopComponent")
@ActionReference(path = "Menu/Sales" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_CustomerPaymentAction",
        preferredID = "CustomerPaymentTopComponent")
@Messages({
    "CTL_CustomerPaymentAction=CustomerPayment",
    "CTL_CustomerPaymentTopComponent=CustomerPayment Window",
    "HINT_CustomerPaymentTopComponent=This is a CustomerPayment window"
})
public final class CustomerPaymentTopComponent extends NTopComponent {

    public CustomerPaymentTopComponent() {
        onLoad();
        setName(Bundle.CTL_CustomerPaymentTopComponent());
        setToolTipText(Bundle.HINT_CustomerPaymentTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        amountTextField = new javax.swing.JTextField();
        chequeNumbertField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        bankingDatePicker = new JXDatePicker();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        paymentTable = new javax.swing.JTable();
        bankComboBox = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        totalTextField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        customerComboBox = new javax.swing.JComboBox<>();
        creditTextField = new javax.swing.JTextField();
        printCheckBox = new javax.swing.JCheckBox();
        jLabel14 = new javax.swing.JLabel();
        cashTextField = new javax.swing.JTextField();
        processButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        receiptNumberTextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        receiptDatePicker = new JXDatePicker();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        cashBoxComboBox = new javax.swing.JComboBox();

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(CustomerPaymentTopComponent.class, "CustomerPaymentTopComponent.jPanel3.border.title"))); // NOI18N

        amountTextField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        amountTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amountTextFieldActionPerformed(evt);
            }
        });

        chequeNumbertField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chequeNumbertFieldActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(CustomerPaymentTopComponent.class, "CustomerPaymentTopComponent.jLabel7.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(CustomerPaymentTopComponent.class, "CustomerPaymentTopComponent.jLabel6.text")); // NOI18N

        bankingDatePicker.setName("bankingDatePicker"); // NOI18N
        bankingDatePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bankingDatePickerActionPerformed(evt);
            }
        });
        bankingDatePicker.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                bankingDatePickerKeyPressed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(CustomerPaymentTopComponent.class, "CustomerPaymentTopComponent.jLabel5.text")); // NOI18N

        paymentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Amount", "Cheque Number", "Banking Date", "Bank"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        paymentTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                paymentTableKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(paymentTable);
        if (paymentTable.getColumnModel().getColumnCount() > 0) {
            paymentTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(CustomerPaymentTopComponent.class, "CustomerPaymentTopComponent.paymentTable.columnModel.title0")); // NOI18N
            paymentTable.getColumnModel().getColumn(0).setCellRenderer(rightAlignCell);
            paymentTable.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(CustomerPaymentTopComponent.class, "CustomerPaymentTopComponent.paymentTable.columnModel.title1")); // NOI18N
            paymentTable.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(CustomerPaymentTopComponent.class, "CustomerPaymentTopComponent.paymentTable.columnModel.title2")); // NOI18N
            paymentTable.getColumnModel().getColumn(3).setHeaderValue(org.openide.util.NbBundle.getMessage(CustomerPaymentTopComponent.class, "CustomerPaymentTopComponent.paymentTable.columnModel.title3")); // NOI18N
        }

        bankComboBox.setName("bankCombo"); // NOI18N
        bankComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                bankComboBoxKeyPressed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel9, org.openide.util.NbBundle.getMessage(CustomerPaymentTopComponent.class, "CustomerPaymentTopComponent.jLabel9.text")); // NOI18N

        totalTextField.setEditable(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel12, org.openide.util.NbBundle.getMessage(CustomerPaymentTopComponent.class, "CustomerPaymentTopComponent.jLabel12.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(CustomerPaymentTopComponent.class, "CustomerPaymentTopComponent.jLabel3.text")); // NOI18N

        customerComboBox.setName("customerComboBox"); // NOI18N
        customerComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                customerComboBoxFocusGained(evt);
            }
        });
        customerComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerComboBoxActionPerformed(evt);
            }
        });
        customerComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                customerComboBoxKeyPressed(evt);
            }
        });

        creditTextField.setEditable(false);

        org.openide.awt.Mnemonics.setLocalizedText(printCheckBox, org.openide.util.NbBundle.getMessage(CustomerPaymentTopComponent.class, "CustomerPaymentTopComponent.printCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel14, org.openide.util.NbBundle.getMessage(CustomerPaymentTopComponent.class, "CustomerPaymentTopComponent.jLabel14.text")); // NOI18N

        cashTextField.setEditable(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(amountTextField)
                            .addComponent(chequeNumbertField, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bankingDatePicker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bankComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(printCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cashTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(customerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                        .addComponent(creditTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(customerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(creditTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(chequeNumbertField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(bankingDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(amountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bankComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cashTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel14))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(totalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12)
                        .addComponent(printCheckBox)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(processButton, org.openide.util.NbBundle.getMessage(CustomerPaymentTopComponent.class, "CustomerPaymentTopComponent.processButton.text")); // NOI18N
        processButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(clearButton, org.openide.util.NbBundle.getMessage(CustomerPaymentTopComponent.class, "CustomerPaymentTopComponent.clearButton.text")); // NOI18N
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        receiptNumberTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receiptNumberTextFieldActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel10, org.openide.util.NbBundle.getMessage(CustomerPaymentTopComponent.class, "CustomerPaymentTopComponent.jLabel10.text")); // NOI18N

        receiptDatePicker.setName("receiptDatePicker"); // NOI18N
        receiptDatePicker.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                receiptDatePickerKeyPressed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel11, org.openide.util.NbBundle.getMessage(CustomerPaymentTopComponent.class, "CustomerPaymentTopComponent.jLabel11.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel13, org.openide.util.NbBundle.getMessage(CustomerPaymentTopComponent.class, "CustomerPaymentTopComponent.jLabel13.text")); // NOI18N

        cashBoxComboBox.setName("bankCombo"); // NOI18N
        cashBoxComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cashBoxComboBoxKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cashBoxComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(receiptDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(receiptNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(processButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clearButton))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cashBoxComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel13))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(clearButton)
                        .addComponent(processButton)
                        .addComponent(receiptNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10)
                        .addComponent(receiptDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel11)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void amountTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amountTextFieldActionPerformed
        if (chequeNumbertField.getText().equals("")) {
            addPay();
            chequeNumbertField.requestFocus();
        } else {
            bankComboBox.requestFocus();
        }
    }//GEN-LAST:event_amountTextFieldActionPerformed

    private void chequeNumbertFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chequeNumbertFieldActionPerformed
        bankingDatePicker.requestFocus();
    }//GEN-LAST:event_chequeNumbertFieldActionPerformed

    private void bankingDatePickerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bankingDatePickerKeyPressed
        if (evt.getKeyCode() == 10) {
            amountTextField.requestFocus();
        }
    }//GEN-LAST:event_bankingDatePickerKeyPressed

    private void paymentTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paymentTableKeyReleased
        if (evt.getKeyCode() == 127) {
            deletePaymentRow(paymentTable.getSelectedRow());
        }
    }//GEN-LAST:event_paymentTableKeyReleased

    private void bankComboBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bankComboBoxKeyPressed
        if (evt.getKeyCode() == 10) {
            addPay();
        }
    }//GEN-LAST:event_bankComboBoxKeyPressed

    private void processButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processButtonActionPerformed
        process();
    }//GEN-LAST:event_processButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        clearAll();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void receiptNumberTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receiptNumberTextFieldActionPerformed
        processButton.requestFocus();
    }//GEN-LAST:event_receiptNumberTextFieldActionPerformed

    private void receiptDatePickerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_receiptDatePickerKeyPressed
        if (evt.getKeyCode() == 10) {
            receiptNumberTextField.requestFocus();
        }
    }//GEN-LAST:event_receiptDatePickerKeyPressed

    private void bankingDatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bankingDatePickerActionPerformed
        //paymentAmountTextField.requestFocus();
    }//GEN-LAST:event_bankingDatePickerActionPerformed

    private void customerComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerComboBoxFocusGained

    }//GEN-LAST:event_customerComboBoxFocusGained

    private void customerComboBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customerComboBoxKeyPressed
        if (evt.getKeyCode() == 10) {
            chequeNumbertField.requestFocus();
        }
    }//GEN-LAST:event_customerComboBoxKeyPressed

    private void customerComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerComboBoxActionPerformed
        Customer customer = (Customer) customerComboBox.getSelectedItem();
        creditTextField.setText("");
        if (customer == null) {
            return;
        }

        creditTextField.setText(nf2d.format(customer.getCredit()));
    }//GEN-LAST:event_customerComboBoxActionPerformed

    private void cashBoxComboBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cashBoxComboBoxKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_cashBoxComboBoxKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amountTextField;
    private javax.swing.JComboBox bankComboBox;
    private org.jdesktop.swingx.JXDatePicker bankingDatePicker;
    private javax.swing.JComboBox cashBoxComboBox;
    private javax.swing.JTextField cashTextField;
    private javax.swing.JTextField chequeNumbertField;
    private javax.swing.JButton clearButton;
    private javax.swing.JTextField creditTextField;
    private javax.swing.JComboBox<Customer> customerComboBox;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable paymentTable;
    private javax.swing.JCheckBox printCheckBox;
    private javax.swing.JButton processButton;
    private org.jdesktop.swingx.JXDatePicker receiptDatePicker;
    private javax.swing.JTextField receiptNumberTextField;
    private javax.swing.JTextField totalTextField;
    // End of variables declaration//GEN-END:variables

//    SaleInvoice saleInvoice;
//    Customer customer;
    DefaultTableModel paymentDtm;
    double amountInCash;

    protected void onLoad() {
        initComponents();
        paymentDtm = (DefaultTableModel) paymentTable.getModel();
        KeyAdapter();
    }

    @Override
    public void setVisible(boolean b) {
        super.setVisible(b);
        Combo.fillCustomers(customerComboBox);
        Combo.fillBanks(bankComboBox);
        Combo.fillCashBoxes(cashBoxComboBox);
//        clearAll();
    }

    private void addPay() {
        try {
            double paymentAmount = Double.valueOf(amountTextField.getText().trim());
            if (paymentAmount > 0) {
                String chequeNumber = chequeNumbertField.getText().trim();
                if (!chequeNumber.equals("")) {
                    Date bankingDate = bankingDatePicker.getDate();
                    if (bankingDate != null) {
                        Object[] row = {nf2d.format(paymentAmount), chequeNumber, yyyy_MM_dd.format(bankingDate), ((Bank) bankComboBox.getSelectedItem()).getCode()};
                        fillPaymentTable(row);
                    }
                } else {
                    for (int i = 0; i < paymentTable.getRowCount(); i++) {
                        if (paymentTable.getValueAt(i, 1) == null) {
                            paymentAmount += Double.valueOf(paymentTable.getValueAt(i, 0).toString());
                            paymentTable.setValueAt(nf2d.format(paymentAmount), i, 0);
                            amountInCash = paymentAmount;
                            clearPaymentFields();
                            calcAmount();
                            return;
                        }
                    }
                    Object[] row = {nf2d.format(paymentAmount)};
                    fillPaymentTable(row);
                    chequeNumbertField.requestFocus();
                }
            }
        } catch (NumberFormatException e) {
        } catch (Exception e) {
            Loggings.logError(getName(), e);
        }
    }

    private void fillPaymentTable(Object[] row) {
        paymentDtm.addRow(row);
        clearPaymentFields();
        calcAmount();
    }

    private void deletePaymentRow(int selectedRow) {
        if (selectedRow > -1) {
            paymentDtm.removeRow(selectedRow);
        }
    }

    private void clearPaymentFields() {
        chequeNumbertField.setText("");
        amountTextField.setText("");
    }

    private void clearAll() {
        totalTextField.setText("");
        cashTextField.setText("");
        receiptNumberTextField.setText("");
        creditTextField.setText("");
        clearPaymentFields();
        paymentDtm.setRowCount(0);
//        customer = null;
        amountInCash = 0;
        customerComboBox.requestFocus();
        fillBanks();
    }

    private void process() {
        int rowCount = paymentTable.getRowCount();
        if (rowCount == 0) {
            return;
        }
        try {
            List<Serializable> serializables = new ArrayList<>();
//            String invoiceNumber = invoiceNumberField.getText().trim();
//            saleInvoice = manager.find(SaleInvoice.class, invoiceNumber);
            String receiptNumber = receiptNumberTextField.getText().trim();
            double paidAmount = Double.parseDouble(totalTextField.getText().trim());
            if (receiptNumber.isEmpty()) {
                receiptNumber = System.currentTimeMillis() + "";
//                showError("Receipt Number Required.");
//                return;
            }
            CollectionReceipt collectionReceipt = manager.find(CollectionReceipt.class, receiptNumber);
            if (collectionReceipt != null) {
                showError("Receipt " + receiptNumber + " Already Updated.");
                return;
            }
            Customer customer = (Customer) customerComboBox.getSelectedItem();
            collectionReceipt = new CollectionReceipt(receiptNumber);
            Date collectedTime = receiptDatePicker.getDate();
            double collectedAmount = Double.valueOf(totalTextField.getText().trim());
            collectionReceipt.setCollectedTime(collectedTime);
//            collectionReceipt.setSaleInvoice(saleInvoice);
            collectionReceipt.setAmount(collectedAmount);
            collectionReceipt.setAmountInCash(amountInCash);
            customer.setCredit(customer.getCredit() - collectedAmount);

            List<SaleCheque> saleCheques = new ArrayList<>();
            for (int i = 0; i < rowCount; i++) {
                Object o = paymentTable.getValueAt(i, 1);
                String chequeNumber = o == null ? "" : o.toString().trim();
                double amount = Double.valueOf(paymentTable.getValueAt(i, 0).toString());
                if (chequeNumber.equals("")) {
                    SaleCash saleCash = new SaleCash(receiptNumber);
                    saleCash.setAmount(amount);
                    saleCash.setCollectionReceipt(collectionReceipt);
                    collectionReceipt.setSaleCash(saleCash);
                    serializables.add(saleCash);
                } else {
                    Date bankingDate = yyyy_MM_dd.parse(paymentTable.getValueAt(i, 2).toString());
                    String bankCode = paymentTable.getValueAt(i, 3).toString();
                    Bank bank = manager.find(Bank.class, bankCode);
                    SaleChequePK saleChequePK = new SaleChequePK(chequeNumber, bankCode, receiptNumber);
                    SaleCheque saleCheque = new SaleCheque(saleChequePK);
                    saleCheque.setAmount(amount);
                    saleCheque.setBank(bank);
                    saleCheque.setBankingDate(bankingDate);
                    saleCheque.setCollectionReceipt(collectionReceipt);
                    saleCheque.setStatus(0);
                    saleCheques.add(saleCheque);
                    serializables.add(saleCheque);
                }
            }
            collectionReceipt.setSaleChequeCollection(saleCheques);
            collectionReceipt.setCustomer(customer);
//            System.out.println("ID class is: " + manager.getIdentifier(collectionReceipt).getClass());
//            System.out.println("Class name is: " + collectionReceipt.getClass().getName());

            CashBox cashBox = (CashBox) cashBoxComboBox.getSelectedItem();
            cashBox = manager.find(CashBox.class, cashBox.getId());
            double oldBalance = cashBox.getBalance();
            cashBox.setBalance(oldBalance + amountInCash);
            CashLog cashLog = new CashLog(new Date(), cashBox.getId());
            cashLog.setAmount(amountInCash);
            cashLog.setCashBox(cashBox);
            cashLog.setBoxBalance(oldBalance);
            cashLog.setEntity(CollectionReceipt.class.getName());
            cashLog.setEntityId(Convert.toBytes(collectionReceipt.getReceiptNumber()));
            serializables.add(cashBox);
            serializables.add(cashLog);

            serializables.add(collectionReceipt);

//            double remainingAmount = Double.valueOf(remainingAmountField.getText().trim());
//            saleInvoice.setCredit(remainingAmount);
            Collection<CollectionReceipt> collectionReceipts = customer.getCollectionReceiptCollection();
            collectionReceipts = collectionReceipts == null ? new ArrayList<>() : collectionReceipts;
            collectionReceipts.add(collectionReceipt);
//            saleInvoice.setReceivedAmount(saleInvoice.getAmount() - remainingAmount);
            customer.setCollectionReceiptCollection(collectionReceipts);
            serializables.add(customer);
            if (manager.update(serializables)) {
                if (printCheckBox.isSelected()) {
                    Map<String, Object> parameters = new LinkedHashMap<>();
//                parameters.put("invoice", invoiceNumber);
                    parameters.put("receipt", receiptNumber);
                    parameters.put("paidAmount", paidAmount);
                    PrintViewTopComponent tc = (PrintViewTopComponent) WindowManager.getDefault().findTopComponent("PrintViewTopComponent");
                    URL url = getClass().getResource("/com/nanosl/nbiz/gui/jrxml/" + "receipt" + ".jasper");
                    //            URL url = getClass().getResource("/com/nanosl/nbiz/gui/jrxml/" + fileName + ".jasper");
                    JasperReport report = (JasperReport) JRLoader.loadObject(url);//"src/com/nanosl/nbiz/gui/jrxml/report1.jasper"
                    tc.print(report, parameters);
                }
                showSuccess("Update Success.");
                clearAll();
                return;
            }
        } catch (NumberFormatException | ParseException | JRException ex) {
            Loggings.logError(getName(), ex);
        }
        showError("Unable to complete payment!");
    }

    private void fillBanks() {
        bankComboBox.setModel(new DefaultComboBoxModel(manager.find(Bank.class).toArray()));
    }

    private void KeyAdapter() {
        AutoCompleteDecorator.decorate(bankComboBox);
        setComboBoxKeyAdapters(bankComboBox);
        setComboBoxKeyAdapters(bankingDatePicker);
        setComboBoxKeyAdapters(receiptDatePicker);
    }

    private void setComboBoxKeyAdapters(JComponent comp) {
        String compName = comp.getName();
        Component component[] = comp.getComponents();
        for (int i = 0; i < component.length; i++) {
            if (compName.equals("bankCombo")) {
                component[i].addKeyListener(bankComboBoxKeyAdapter);
            } else if (compName.equals("bankingDatePicker")) {
                component[i].addKeyListener(bankingDatePickerKeyAdapter);
            } else if (compName.equals("receiptDatePicker")) {
                component[i].addKeyListener(receiptDatePickerKeyAdapter);
            }

        }
    }
    KeyAdapter bankComboBoxKeyAdapter = new java.awt.event.KeyAdapter() {
        @Override
        public void keyPressed(KeyEvent evt) {
            bankComboBoxKeyPressed(evt);
        }
    };
    KeyAdapter bankingDatePickerKeyAdapter = new java.awt.event.KeyAdapter() {
        @Override
        public void keyPressed(KeyEvent evt) {
            bankingDatePickerKeyPressed(evt);
        }
    };
    KeyAdapter receiptDatePickerKeyAdapter = new java.awt.event.KeyAdapter() {
        @Override
        public void keyPressed(KeyEvent evt) {
            receiptDatePickerKeyPressed(evt);
        }
    };

    /*
    private void cancelInvoice() {
        String invoiceNumber = invoiceNumberField.getText().trim();
        SaleInvoice saleInvoice = manager.find(SaleInvoice.class, invoiceNumber);
        if (saleInvoice == null) {
            showError("No Invoice Selected.");
            return;
        }
        if (saleInvoice.getReceivedAmount() > 0) {
            showError("Allowed only non paid Invoices.");
            return;
        }
        int c = JOptionPane.showConfirmDialog(this, "Are you sure to cancel the Invoice and Return the items to stock?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (c != JOptionPane.YES_OPTION) {
            return;
        }
        CanceledInvoice canceledInvoice = new CanceledInvoice(invoiceNumber);
        Collection<CanceledInvoiceHasItem> canceledInvoiceHasItems = new ArrayList<CanceledInvoiceHasItem>();

        Collection<SaleInvoiceHasItem> saleInvoiceHasItems = saleInvoice.getSaleInvoiceHasItemCollection();
        List<Serializable> serializables = new ArrayList<Serializable>();
        for (Iterator<SaleInvoiceHasItem> it = saleInvoiceHasItems.iterator(); it.hasNext();) {
            SaleInvoiceHasItem saleInvoiceHasItem = it.next();
            Item item = manager.find(Item.class, saleInvoiceHasItem.getItem().getCode());
            CanceledInvoiceHasItem canceledInvoiceHasItem = new CanceledInvoiceHasItem(invoiceNumber, item.getCode());
            canceledInvoiceHasItem.setCanceledInvoice(canceledInvoice);
            canceledInvoiceHasItem.setItem(item);
            canceledInvoiceHasItem.setDiscount(saleInvoiceHasItem.getDiscount());
            canceledInvoiceHasItem.setQuantity(saleInvoiceHasItem.getQuantity());
            canceledInvoiceHasItem.setRate(saleInvoiceHasItem.getRate());
            canceledInvoiceHasItems.add(canceledInvoiceHasItem);
            serializables.add(canceledInvoiceHasItem);
            Stock stock = item.getStock();
            double remainingQuantity = stock.getQuantity();
            stock.setQuantity(remainingQuantity + saleInvoiceHasItem.getQuantity());
            serializables.add(stock);
        }
        canceledInvoice.setAmount(saleInvoice.getAmount());
        canceledInvoice.setCredit(saleInvoice.getCredit());
        canceledInvoice.setCustomer(saleInvoice.getCustomer());
        canceledInvoice.setDiscount(saleInvoice.getDiscount());
        canceledInvoice.setInvTime(saleInvoice.getInvTime());
        canceledInvoice.setOperator(Data.getOperator().getEmployee().getCode());
        canceledInvoice.setReceivedAmount(saleInvoice.getReceivedAmount());
        canceledInvoice.setCanceledInvoiceHasItemCollection(canceledInvoiceHasItems);
        serializables.add(canceledInvoice);
        if (manager.update(serializables)) {
            manager.delete(SaleInvoice.class, saleInvoice.getInvNo());
            showSuccess("Invoice Canceled");
            clearAll();
        }
    }
     */
    private void calcAmount() {
        double total = 0, cash = 0;
        for (int i = 0; i < paymentDtm.getRowCount(); i++) {
            double rowAmount = Double.valueOf(paymentDtm.getValueAt(i, 0).toString());
            total += rowAmount;
            if (paymentDtm.getValueAt(i, 1) == null) {
                cash += rowAmount;
            }
        }
        amountInCash = cash;
        totalTextField.setText(nf2d.format(total));
        cashTextField.setText(nf2d.format(cash));
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
