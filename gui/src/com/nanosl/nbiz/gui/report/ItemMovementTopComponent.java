/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.nanosl.nbiz.gui.report;

import com.nanosl.lib.date.JXDatePicker;
import com.nanosl.nbiz.util.Combo;
import static com.nanosl.nbiz.util.Format.nf2d;
import static com.nanosl.nbiz.util.Format.yyyy_MM_dd;
import query.Find;
import com.nanosl.nbiz.util.NTopComponent;
import entity.Item;
import entity.PurchaseInvoiceHasItem;
import entity.SaleInvoiceHasItem;
import entity.StockTransfer;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.nanosl.nbiz.gui.report//ItemMovement//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "ItemMovementTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "com.nanosl.nbiz.gui.report.ItemMovementTopComponent")
@ActionReference(path = "Menu/Report" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ItemMovementAction",
        preferredID = "ItemMovementTopComponent")
@Messages({
    "CTL_ItemMovementAction=ItemMovement",
    "CTL_ItemMovementTopComponent=ItemMovement Window",
    "HINT_ItemMovementTopComponent=This is a ItemMovement window"
})
public final class ItemMovementTopComponent extends NTopComponent {

    public ItemMovementTopComponent() {
        onLoad();
        setName(Bundle.CTL_ItemMovementTopComponent());
        setToolTipText(Bundle.HINT_ItemMovementTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        itemComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        receiveTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        issueTable = new javax.swing.JTable();
        totalReceiveLabel = new javax.swing.JLabel();
        totalIssueLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        startDatePicker = new JXDatePicker();
        endDatePicker = new JXDatePicker();

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ItemMovementTopComponent.class, "ItemMovementTopComponent.jLabel1.text")); // NOI18N

        itemComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemComboBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ItemMovementTopComponent.class, "ItemMovementTopComponent.jLabel2.text")); // NOI18N

        receiveTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Quantity"
            }
        ));
        jScrollPane1.setViewportView(receiveTable);
        receiveTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(ItemMovementTopComponent.class, "ItemMovementTopComponent.receiveTable.columnModel.title0")); // NOI18N
        receiveTable.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(ItemMovementTopComponent.class, "ItemMovementTopComponent.receiveTable.columnModel.title1")); // NOI18N
        receiveTable.getColumnModel().getColumn(1).setCellRenderer(rightAlignCell);

        issueTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Quantity", "Source"
            }
        ));
        jScrollPane2.setViewportView(issueTable);
        issueTable.getColumnModel().getColumn(0).setPreferredWidth(50);
        issueTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(ItemMovementTopComponent.class, "ItemMovementTopComponent.issueTable.columnModel.title0")); // NOI18N
        issueTable.getColumnModel().getColumn(1).setPreferredWidth(50);
        issueTable.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(ItemMovementTopComponent.class, "ItemMovementTopComponent.issueTable.columnModel.title1")); // NOI18N
        issueTable.getColumnModel().getColumn(1).setCellRenderer(rightAlignCell);
        issueTable.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(ItemMovementTopComponent.class, "ItemMovementTopComponent.issueTable.columnModel.title2")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(totalReceiveLabel, org.openide.util.NbBundle.getMessage(ItemMovementTopComponent.class, "ItemMovementTopComponent.totalReceiveLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(totalIssueLabel, org.openide.util.NbBundle.getMessage(ItemMovementTopComponent.class, "ItemMovementTopComponent.totalIssueLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(ItemMovementTopComponent.class, "ItemMovementTopComponent.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(ItemMovementTopComponent.class, "ItemMovementTopComponent.jLabel4.text")); // NOI18N

        startDatePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startDatePickerActionPerformed(evt);
            }
        });

        endDatePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endDatePickerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(itemComboBox, 0, 552, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(totalReceiveLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(totalIssueLabel))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(startDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(endDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(startDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(itemComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, 0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalReceiveLabel)
                    .addComponent(totalIssueLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void itemComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemComboBoxActionPerformed
        fill();
    }//GEN-LAST:event_itemComboBoxActionPerformed

    private void startDatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startDatePickerActionPerformed
    }//GEN-LAST:event_startDatePickerActionPerformed

    private void endDatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endDatePickerActionPerformed
    }//GEN-LAST:event_endDatePickerActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXDatePicker endDatePicker;
    private javax.swing.JTable issueTable;
    private javax.swing.JComboBox itemComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable receiveTable;
    private org.jdesktop.swingx.JXDatePicker startDatePicker;
    private javax.swing.JLabel totalIssueLabel;
    private javax.swing.JLabel totalReceiveLabel;
    // End of variables declaration//GEN-END:variables
    DefaultTableModel issueTableModel;
    DefaultTableModel receiveTableModel;

    private void onLoad() {

        initComponents();
        issueTableModel = (DefaultTableModel) issueTable.getModel();
        receiveTableModel = (DefaultTableModel) receiveTable.getModel();
        issueTable.setDefaultRenderer(Object.class, coloredCellRenderer);
        receiveTable.setDefaultRenderer(Object.class, coloredCellRenderer);
    }

    @Override
    public void setVisible(boolean b) {
        super.setVisible(b);
        clear();
    }

    private void clear() {
        Combo.fillItems(itemComboBox);
        issueTableModel.setRowCount(0);
        receiveTableModel.setRowCount(0);

        totalReceiveLabel.setText(nf2d.format(0));
        totalIssueLabel.setText(nf2d.format(0));

    }

    private void fill() {
        issueTableModel.setRowCount(0);
        receiveTableModel.setRowCount(0);
        totalReceiveLabel.setText(nf2d.format(0));
        totalIssueLabel.setText(nf2d.format(0));
        Object o = itemComboBox.getSelectedItem();
        Item item = o == null ? null : (Item) o;
        Date startDate = startDatePicker.getDate();
        Date endDate = endDatePicker.getDate();

        List<SaleInvoiceHasItem> saleInvoiceHasItems = Find.saleInvoiceItemsByItemAndDates(item, startDate, endDate);
        List<StockTransfer> stockTransfers = Find.stockTransferItemsByItemAndDates(item, startDate, endDate);
// Add stocktransfer tracking
        double totIssues = 0;
        for (Iterator<SaleInvoiceHasItem> it = saleInvoiceHasItems.iterator(); it.hasNext();) {
            SaleInvoiceHasItem saleInvoiceHasItem = it.next();
            double qty = saleInvoiceHasItem.getQuantity();
            totIssues += qty;
            Object[] row = {
                yyyy_MM_dd.format(saleInvoiceHasItem.getSaleInvoice().getInvTime()),
                nf2d.format(qty),
                "Sale"
            };
            issueTableModel.addRow(row);
        }
        for (Iterator<StockTransfer> it = stockTransfers.iterator(); it.hasNext();) {
            StockTransfer stockTransfer = it.next();
            double qty = stockTransfer.getQuantity();
            totIssues += qty;
            Object[] row = {
                yyyy_MM_dd.format(stockTransfer.getStockTransferPK().getTransferDate()),
                nf2d.format(qty),
                "Transfer"
            };
            issueTableModel.addRow(row);
            
        }
        totalIssueLabel.setText(nf2d.format(totIssues));
        ///////////////////////////////////////
        List<PurchaseInvoiceHasItem> purchaseInvoiceHasItems = Find.PurchaseInvoiceHasItemByItemAndDates(item, startDate, endDate);
        double totReceive = 0;
        for (Iterator<PurchaseInvoiceHasItem> it = purchaseInvoiceHasItems.iterator(); it.hasNext();) {
            PurchaseInvoiceHasItem purchaseInvoiceHasItem = it.next();
            double qty = purchaseInvoiceHasItem.getQuantity();
            totReceive += qty;
            Object[] row = {
                yyyy_MM_dd.format(purchaseInvoiceHasItem.getPurchaseInvoice().getInvDate()),
                nf2d.format(qty)
            };
            receiveTableModel.addRow(row);
        }
        totalReceiveLabel.setText(nf2d.format(totReceive));

    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
