/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.nanosl.nbiz.gui;

import com.nanosl.lib.date.JXDatePicker;
import com.nanosl.lib.log.Loggings;
import com.nanosl.nbiz.util.Combo;
import com.nanosl.nbiz.util.Convert;
import static com.nanosl.nbiz.util.Format.nf2d;
import static com.nanosl.nbiz.util.Format.yyyy_MM_dd;
import com.nanosl.nbiz.util.NTopComponent;
import com.nanosl.nbiz.util.PrintViewTopComponent;
import entity.Account;
import entity.CashBox;
import entity.CashLog;
import entity.CollectionReceipt;
import entity.Customer;
import entity.Expenses;
import entity.ExpensesType;
import entity.IssuedCheque;
import entity.SaleCash;
import entity.SaleCheque;
import entity.SaleChequePK;
import java.io.Serializable;
import java.net.URL;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.nanosl.nbiz.gui//Expenses//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "ExpensesTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "com.nanosl.nbiz.gui.ExpensesTopComponent")
@ActionReference(path = "Menu/Other" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ExpensesAction",
        preferredID = "ExpensesTopComponent")
@Messages({
    "CTL_ExpensesAction=Expenses",
    "CTL_ExpensesTopComponent=Expenses Window",
    "HINT_ExpensesTopComponent=This is a Expenses window"
})
public final class ExpensesTopComponent extends NTopComponent {

    public ExpensesTopComponent() {
        onLoad();
        setName(Bundle.CTL_ExpensesTopComponent());
        setToolTipText(Bundle.HINT_ExpensesTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        reasonTextField = new javax.swing.JTextField();
        datePicker = new JXDatePicker();
        updateButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        accountComboBox = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        totalTextField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        printCheckBox = new javax.swing.JCheckBox();
        amountTextField = new javax.swing.JTextField();
        chequeNumbertField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        bankingDatePicker = new JXDatePicker();
        jLabel5 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        paymentTable = new javax.swing.JTable();
        cashTextField = new javax.swing.JTextField();
        codeLabel1 = new javax.swing.JLabel();
        cashBoxComboBox = new javax.swing.JComboBox();
        codeLabel2 = new javax.swing.JLabel();
        expensesTypeComboBox = new javax.swing.JComboBox();

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ExpensesTopComponent.class, "ExpensesTopComponent.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ExpensesTopComponent.class, "ExpensesTopComponent.jLabel2.text")); // NOI18N

        reasonTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reasonTextFieldActionPerformed(evt);
            }
        });

        datePicker.setName("datePicker"); // NOI18N
        datePicker.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                datePickerKeyPressed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(updateButton, org.openide.util.NbBundle.getMessage(ExpensesTopComponent.class, "ExpensesTopComponent.updateButton.text")); // NOI18N
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(clearButton, org.openide.util.NbBundle.getMessage(ExpensesTopComponent.class, "ExpensesTopComponent.clearButton.text")); // NOI18N
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        accountComboBox.setName("bankCombo"); // NOI18N
        accountComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                accountComboBoxKeyPressed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel9, org.openide.util.NbBundle.getMessage(ExpensesTopComponent.class, "ExpensesTopComponent.jLabel9.text")); // NOI18N

        totalTextField.setEditable(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel12, org.openide.util.NbBundle.getMessage(ExpensesTopComponent.class, "ExpensesTopComponent.jLabel12.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(printCheckBox, org.openide.util.NbBundle.getMessage(ExpensesTopComponent.class, "ExpensesTopComponent.printCheckBox.text")); // NOI18N

        amountTextField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        amountTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amountTextFieldActionPerformed(evt);
            }
        });

        chequeNumbertField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chequeNumbertFieldActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(ExpensesTopComponent.class, "ExpensesTopComponent.jLabel7.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(ExpensesTopComponent.class, "ExpensesTopComponent.jLabel6.text")); // NOI18N

        bankingDatePicker.setName("bankingDatePicker"); // NOI18N
        bankingDatePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bankingDatePickerActionPerformed(evt);
            }
        });
        bankingDatePicker.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                bankingDatePickerKeyPressed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(ExpensesTopComponent.class, "ExpensesTopComponent.jLabel5.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel14, org.openide.util.NbBundle.getMessage(ExpensesTopComponent.class, "ExpensesTopComponent.jLabel14.text")); // NOI18N

        paymentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Amount", "Cheque Number", "Banking Date", "Bank"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        paymentTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                paymentTableKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(paymentTable);

        cashTextField.setEditable(false);

        org.openide.awt.Mnemonics.setLocalizedText(codeLabel1, org.openide.util.NbBundle.getMessage(ExpensesTopComponent.class, "ExpensesTopComponent.codeLabel1.text")); // NOI18N

        cashBoxComboBox.setName("bankCombo"); // NOI18N
        cashBoxComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cashBoxComboBoxKeyPressed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(codeLabel2, org.openide.util.NbBundle.getMessage(ExpensesTopComponent.class, "ExpensesTopComponent.codeLabel2.text")); // NOI18N

        expensesTypeComboBox.setName("bankCombo"); // NOI18N
        expensesTypeComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                expensesTypeComboBoxKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(datePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(codeLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(expensesTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(reasonTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(codeLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cashBoxComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clearButton)
                        .addGap(18, 18, 18)
                        .addComponent(updateButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(printCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cashTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(amountTextField)
                            .addComponent(chequeNumbertField, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bankingDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(accountComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(datePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(expensesTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(codeLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(reasonTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(chequeNumbertField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(bankingDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(amountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(accountComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cashTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel14))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(totalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12)
                        .addComponent(printCheckBox)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateButton)
                    .addComponent(clearButton)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cashBoxComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(codeLabel1)))
                .addGap(7, 7, 7))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(167, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void paymentTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paymentTableKeyReleased
        if (evt.getKeyCode() == 127) {
            deletePaymentRow(paymentTable.getSelectedRow());
        }
    }//GEN-LAST:event_paymentTableKeyReleased

    private void bankingDatePickerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bankingDatePickerKeyPressed
        if (evt.getKeyCode() == 10) {
            amountTextField.requestFocus();
        }
    }//GEN-LAST:event_bankingDatePickerKeyPressed

    private void bankingDatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bankingDatePickerActionPerformed
//        amountTextField.requestFocus();
    }//GEN-LAST:event_bankingDatePickerActionPerformed

    private void chequeNumbertFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chequeNumbertFieldActionPerformed
        bankingDatePicker.requestFocus();
    }//GEN-LAST:event_chequeNumbertFieldActionPerformed

    private void amountTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amountTextFieldActionPerformed
        if (chequeNumbertField.getText().equals("")) {
            addPay();
            chequeNumbertField.requestFocus();
        } else {
            accountComboBox.requestFocus();
        }
    }//GEN-LAST:event_amountTextFieldActionPerformed

    private void accountComboBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_accountComboBoxKeyPressed
        if (evt.getKeyCode() == 10) {
            addPay();
        }
    }//GEN-LAST:event_accountComboBoxKeyPressed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        clearAll();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        updateExpenses();
    }//GEN-LAST:event_updateButtonActionPerformed

    private void datePickerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_datePickerKeyPressed
        if (evt.getKeyCode() == 10) {
            expensesTypeComboBox.requestFocus();
        }
    }//GEN-LAST:event_datePickerKeyPressed

    private void reasonTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reasonTextFieldActionPerformed
        chequeNumbertField.requestFocus();
    }//GEN-LAST:event_reasonTextFieldActionPerformed

    private void cashBoxComboBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cashBoxComboBoxKeyPressed
        if (evt.getKeyCode() == 10) {
            updateButton.requestFocus();
        }
    }//GEN-LAST:event_cashBoxComboBoxKeyPressed

    private void expensesTypeComboBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_expensesTypeComboBoxKeyPressed
        reasonTextField.requestFocus();
    }//GEN-LAST:event_expensesTypeComboBoxKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox accountComboBox;
    private javax.swing.JTextField amountTextField;
    private org.jdesktop.swingx.JXDatePicker bankingDatePicker;
    private javax.swing.JComboBox cashBoxComboBox;
    private javax.swing.JTextField cashTextField;
    private javax.swing.JTextField chequeNumbertField;
    private javax.swing.JButton clearButton;
    private javax.swing.JLabel codeLabel1;
    private javax.swing.JLabel codeLabel2;
    private org.jdesktop.swingx.JXDatePicker datePicker;
    private javax.swing.JComboBox expensesTypeComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable paymentTable;
    private javax.swing.JCheckBox printCheckBox;
    private javax.swing.JTextField reasonTextField;
    private javax.swing.JTextField totalTextField;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables

    DefaultTableModel paymentDtm;
//    double amountInCash;

    protected void onLoad() {
        initComponents();
        paymentDtm = (DefaultTableModel) paymentTable.getModel();
        clearAll();
    }

    private void clearPaymentFields() {
        chequeNumbertField.setText("");
        amountTextField.setText("");
    }

    private void clearAll() {
        totalTextField.setText("");
        cashTextField.setText("");
        clearPaymentFields();
        paymentDtm.setRowCount(0);
        Combo.fillAccounts(accountComboBox);
        Combo.fillCashBoxes(cashBoxComboBox);
        Combo.fillExpensesTypes(expensesTypeComboBox);
//        customer = null;
//        amountInCash = 0;
    }

    private void updateExpenses() {
        String reason = reasonTextField.getText().trim();
        String totalText = totalTextField.getText();

        if (reason.equals("") || totalText.equals("")) {
            showError("Incorrect Information");
            return;
        }
        double total = Double.parseDouble(totalText);
        Date date = datePicker.getDate();
        Calendar nowCalendar = Calendar.getInstance();
        nowCalendar.setTime(new Date());
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(date);
        calendar.set(Calendar.HOUR_OF_DAY, nowCalendar.get(Calendar.HOUR_OF_DAY));
        calendar.set(Calendar.MINUTE, nowCalendar.get(Calendar.MINUTE));
        calendar.set(Calendar.SECOND, nowCalendar.get(Calendar.SECOND));
        calendar.set(Calendar.MILLISECOND, nowCalendar.get(Calendar.MILLISECOND));
        date = calendar.getTime();
        ExpensesType expensesType = (ExpensesType) expensesTypeComboBox.getSelectedItem();
        if (expensesType == null) {
            expensesType = new ExpensesType("OTHER");
            expensesType.setDescription("OTHER EXPENSES");
            manager.update(expensesType);
            expensesType = manager.find(ExpensesType.class, "OTHER");
        }
        Expenses expenses = new Expenses(date);
        expenses.setExpensesType(expensesType);
        expenses.setNotes(reason);
        expenses.setAmount(total);
        expenses.setPaidTime(date);

        /**
         * ********************************************
         */
        int rowCount = paymentTable.getRowCount();
        if (rowCount == 0) {
            return;
        }
        try {
            List<Serializable> serializables = new ArrayList<>();
//            String invoiceNumber = invoiceNumberField.getText().trim();
//            saleInvoice = manager.find(SaleInvoice.class, invoiceNumber);
//            String receiptNumber = receiptNumberTextField.getText().trim();
//            double paidAmount = Double.parseDouble(totalTextField.getText().trim());
//            if (receiptNumber.isEmpty()) {
//                receiptNumber = System.currentTimeMillis() + "";
////                showError("Receipt Number Required.");
////                return;
//            }
//            CollectionReceipt collectionReceipt = manager.find(CollectionReceipt.class, receiptNumber);
//            if (collectionReceipt != null) {
//                showError("Receipt " + receiptNumber + " Already Updated.");
//                return;
//            }
//            Customer customer = (Customer) customerComboBox.getSelectedItem();
//            collectionReceipt = new CollectionReceipt(receiptNumber);
//            Date collectedTime = receiptDatePicker.getDate();
//            double collectedAmount = Double.valueOf(totalTextField.getText().trim());
//            collectionReceipt.setCollectedTime(collectedTime);
////            collectionReceipt.setSaleInvoice(saleInvoice);
//            collectionReceipt.setAmount(collectedAmount);
//            collectionReceipt.setAmountInCash(amountInCash);
//            customer.setCredit(customer.getCredit() - collectedAmount);

//            List<IssuedCheque> saleCheques = new ArrayList<>();
            double cashAmount = 0;
            for (int i = 0; i < rowCount; i++) {
                Object o = paymentTable.getValueAt(i, 1);
                String chequeNumber = o == null ? "" : o.toString().trim();
                double rowAmount = Double.valueOf(paymentTable.getValueAt(i, 0).toString());
                if (chequeNumber.equals("")) {
                    cashAmount = rowAmount;
                } else {
                    Date bankingDate = yyyy_MM_dd.parse(paymentTable.getValueAt(i, 2).toString());
                    Account account = (Account) paymentTable.getValueAt(i, 3);
                    IssuedCheque issuedCheque = new IssuedCheque(chequeNumber);
                    issuedCheque.setAmount(rowAmount);
                    issuedCheque.setAccount(account);
                    issuedCheque.setBankingDate(bankingDate);
                    issuedCheque.setIssuedDate(date);
                    issuedCheque.setStatus(0);
                    serializables.add(issuedCheque);
                }
            }

//            System.out.println("ID class is: " + manager.getIdentifier(collectionReceipt).getClass());
//            System.out.println("Class name is: " + collectionReceipt.getClass().getName());
            if (cashAmount > 0) {
                CashBox cashBox = (CashBox) cashBoxComboBox.getSelectedItem();
                cashBox = manager.find(CashBox.class, cashBox.getId());
                double oldBalance = cashBox.getBalance();
                cashBox.setBalance(oldBalance - cashAmount);
                CashLog cashLog = new CashLog(new Date(), cashBox.getId());
                cashLog.setAmount(0 - cashAmount);
                cashLog.setCashBox(cashBox);
                cashLog.setBoxBalance(oldBalance);
                cashLog.setEntity(Expenses.class.getName());
                cashLog.setEntityId(Convert.toBytes(date));
                serializables.add(cashBox);
                serializables.add(cashLog);
            }

////            double remainingAmount = Double.valueOf(remainingAmountField.getText().trim());
////            saleInvoice.setCredit(remainingAmount);
//            Collection<CollectionReceipt> collectionReceipts = customer.getCollectionReceiptCollection();
//            collectionReceipts = collectionReceipts == null ? new ArrayList<>() : collectionReceipts;
//            collectionReceipts.add(collectionReceipt);
////            saleInvoice.setReceivedAmount(saleInvoice.getAmount() - remainingAmount);
//            customer.setCollectionReceiptCollection(collectionReceipts);
//            serializables.add(customer);
            serializables.add(expenses);
            if (manager.update(serializables)) {
//                if (printCheckBox.isSelected()) {
//                    Map<String, Object> parameters = new LinkedHashMap<>();
////                parameters.put("invoice", invoiceNumber);
//                    parameters.put("receipt", receiptNumber);
//                    parameters.put("paidAmount", paidAmount);
//                    PrintViewTopComponent tc = (PrintViewTopComponent) WindowManager.getDefault().findTopComponent("PrintViewTopComponent");
//                    URL url = getClass().getResource("/com/nanosl/nbiz/gui/jrxml/" + "receipt" + ".jasper");
//                    //            URL url = getClass().getResource("/com/nanosl/nbiz/gui/jrxml/" + fileName + ".jasper");
//                    JasperReport report = (JasperReport) JRLoader.loadObject(url);//"src/com/nanosl/nbiz/gui/jrxml/report1.jasper"
//                    tc.print(report, parameters);
//                }
                showSuccess("Update Success.");
                clearAll();
                return;
            }
        } catch (NumberFormatException | ParseException ex) {
            Loggings.logError(getName(), ex);
        }
        showError("Unable to complete payment!");

        if (manager.update(expenses)) {
            showSuccess("Update Success!");
            clearAll();
        }
    }

    private void addPay() {
        try {
            double paymentAmount = Double.valueOf(amountTextField.getText().trim());
            if (paymentAmount > 0) {
                String chequeNumber = chequeNumbertField.getText().trim();
                if (!chequeNumber.equals("")) {
                    Date bankingDate = bankingDatePicker.getDate();
                    if (bankingDate != null) {
                        Object[] row = {nf2d.format(paymentAmount), chequeNumber, yyyy_MM_dd.format(bankingDate), ((Account) accountComboBox.getSelectedItem())};
                        fillPaymentTable(row);
                    }
                } else {
                    for (int i = 0; i < paymentTable.getRowCount(); i++) {
                        if (paymentTable.getValueAt(i, 1) == null) {
                            paymentAmount += Double.valueOf(paymentTable.getValueAt(i, 0).toString());
                            paymentTable.setValueAt(nf2d.format(paymentAmount), i, 0);
//                            amountInCash = paymentAmount;
                            clearPaymentFields();
                            calcAmount();
                            return;
                        }
                    }
                    Object[] row = {nf2d.format(paymentAmount)};
                    fillPaymentTable(row);
                    chequeNumbertField.requestFocus();
                }
            }
        } catch (NumberFormatException e) {
        } catch (Exception e) {
            Loggings.logError(getName(), e);
        }
    }

    private void fillPaymentTable(Object[] row) {
        paymentDtm.addRow(row);
        clearPaymentFields();
        calcAmount();
    }

    private void deletePaymentRow(int selectedRow) {
        if (selectedRow > -1) {
            paymentDtm.removeRow(selectedRow);
        }
    }

    private void calcAmount() {
        double total = 0, cash = 0;
        for (int i = 0; i < paymentDtm.getRowCount(); i++) {
            double rowAmount = Double.valueOf(paymentDtm.getValueAt(i, 0).toString());
            total += rowAmount;
            if (paymentDtm.getValueAt(i, 1) == null) {
                cash += rowAmount;
            }
        }
//        amountInCash = cash;
        totalTextField.setText(nf2d.format(total));
        cashTextField.setText(nf2d.format(cash));
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
