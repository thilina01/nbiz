/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.nanosl.nbiz.gui.report;

import com.nanosl.lib.date.JXDatePicker;
import com.nanosl.nbiz.util.Data;
import static com.nanosl.nbiz.util.Format.yyyy_MM_dd;
import com.nanosl.nbiz.util.NTopComponent;
import com.nanosl.nbiz.util.PrintViewTopComponent;
import java.net.URL;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.nanosl.nbiz.gui.report//MonthReport//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "MonthReportTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "com.nanosl.nbiz.gui.report.MonthReportTopComponent")
@ActionReference(path = "Menu/Report" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_MonthReportAction",
        preferredID = "MonthReportTopComponent")
@Messages({
    "CTL_MonthReportAction=MonthReport",
    "CTL_MonthReportTopComponent=MonthReport Window",
    "HINT_MonthReportTopComponent=This is a MonthReport window"
})
public final class MonthReportTopComponent extends NTopComponent {

    public MonthReportTopComponent() {
        initComponents();
        setName(Bundle.CTL_MonthReportTopComponent());
        setToolTipText(Bundle.HINT_MonthReportTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        halfCheckBox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        reportButton = new javax.swing.JButton();
        datePicker = new JXDatePicker();

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        org.openide.awt.Mnemonics.setLocalizedText(halfCheckBox, org.openide.util.NbBundle.getMessage(MonthReportTopComponent.class, "MonthReportTopComponent.halfCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(MonthReportTopComponent.class, "MonthReportTopComponent.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(reportButton, org.openide.util.NbBundle.getMessage(MonthReportTopComponent.class, "MonthReportTopComponent.reportButton.text")); // NOI18N
        reportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportButtonActionPerformed(evt);
            }
        });

        datePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                datePickerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(datePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(reportButton)
                .addGap(18, 18, 18)
                .addComponent(halfCheckBox)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(datePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reportButton)
                    .addComponent(halfCheckBox))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void datePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_datePickerActionPerformed
    }//GEN-LAST:event_datePickerActionPerformed

    private void reportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportButtonActionPerformed
        final HashMap<String, Object> params = new HashMap<String, Object>();
        Date date = datePicker.getDate();
        Calendar c1 = Calendar.getInstance();
        c1.setTime(date);
        c1.set(Calendar.DATE, 1);
        Calendar c2 = Calendar.getInstance();
        c2.setTime(date);
        c2.set(Calendar.DATE, c2.getActualMaximum(Calendar.DATE));
        Calendar c3 = Calendar.getInstance();
        c3.setTime(date);
        c3.set(Calendar.DATE, 1);
        c3.set(Calendar.MONTH, c2.get(Calendar.MONTH) + 1);

        params.put("d1", yyyy_MM_dd.format(c1.getTime()));
        params.put("d2", yyyy_MM_dd.format(c2.getTime()));
        params.put("d3", yyyy_MM_dd.format(c3.getTime()));

        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    PrintViewTopComponent tc = (PrintViewTopComponent) WindowManager.getDefault().findTopComponent("PrintViewTopComponent");
                    Map<String, Object> parameters = Data.getParams();
                    //        parameters.put("first_date", yyyy_MM_dd.format(startDatePicker.getDate()) + " 00:00:00");
                    //        parameters.put("last_date", yyyy_MM_dd.format(endDatePicker.getDate()) + " 23:59:59");
                    String reportSource = "report1_1";
                    if (halfCheckBox.isSelected()) {
                        reportSource = "monthReportA4";
                    }
                    URL url = getClass().getResource("/com/nanosl/nbiz/gui/jrxml/" + reportSource + ".jasper");
                    //            System.out.println(url);
                    JasperReport report = (JasperReport) JRLoader.loadObject(url);
                    tc.print(report, parameters);
                    tc.open();
                    tc.requestActive();
                    //////////////////////
                    //                try {
                    //                    String reportSource = "src/rpt/report1.jrxml";
                    //                    if (halfCheckBox.isSelected()) {
                    //                        reportSource = "src/rpt/monthReportA4.jrxml";
                    //                    }
                    //                    JasperReport jasperReport = JasperCompileManager.compileReport(reportSource);
                    //                    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, params, m.getConnection());
                    //                    new JRViewer(jasperPrint, "Month");
                    //                } catch (Exception ex) {
                    //                }
                    //                }
                } catch (JRException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        });
    }//GEN-LAST:event_reportButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXDatePicker datePicker;
    private javax.swing.JCheckBox halfCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton reportButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
