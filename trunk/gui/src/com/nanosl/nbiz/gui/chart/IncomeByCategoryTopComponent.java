/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.nanosl.nbiz.gui.chart;

import com.nanosl.lib.date.JXDatePicker;
//import com.nanosl.nbiz.gui.Bundle;
import static com.nanosl.nbiz.util.Format.yyyy_MM_dd;
import com.nanosl.nbiz.util.NTopComponent;
import java.awt.BorderLayout;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.embed.swing.JFXPanel;
import javafx.scene.Scene;
import javafx.scene.chart.PieChart;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.nanosl.nbiz.gui//IncomeByCategory//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "IncomeByCategoryTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "com.nanosl.nbiz.gui.IncomeByCategoryTopComponent")
@ActionReference(path = "Menu/Chart" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_IncomeByCategoryAction",
        preferredID = "IncomeByCategoryTopComponent"
)
@Messages({
    "CTL_IncomeByCategoryAction=IncomeByCategory",
    "CTL_IncomeByCategoryTopComponent=IncomeByCategory Window",
    "HINT_IncomeByCategoryTopComponent=This is a IncomeByCategory window"
})
public final class IncomeByCategoryTopComponent extends NTopComponent {

    public IncomeByCategoryTopComponent() {
        onLoad();
//        datePicker1.setDate(new Date());
        setName(Bundle.CTL_IncomeByCategoryTopComponent());
        setToolTipText(Bundle.HINT_IncomeByCategoryTopComponent());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        datePicker = new JXDatePicker();
        datePicker1 = new JXDatePicker();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        topTextField = new javax.swing.JTextField();

        datePicker.setName("datePicker"); // NOI18N
        datePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                datePickerActionPerformed(evt);
            }
        });
        datePicker.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                datePickerKeyPressed(evt);
            }
        });

        datePicker1.setName("datePicker"); // NOI18N
        datePicker1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                datePicker1ActionPerformed(evt);
            }
        });
        datePicker1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                datePicker1KeyPressed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(IncomeByCategoryTopComponent.class, "IncomeByCategoryTopComponent.jLabel1.text")); // NOI18N

        topTextField.setText(org.openide.util.NbBundle.getMessage(IncomeByCategoryTopComponent.class, "IncomeByCategoryTopComponent.topTextField.text")); // NOI18N
        topTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(datePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(datePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(topTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 84, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(datePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(datePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(topTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void datePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_datePickerActionPerformed
        createChartScene();
    }//GEN-LAST:event_datePickerActionPerformed

    private void datePickerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_datePickerKeyPressed

    }//GEN-LAST:event_datePickerKeyPressed

    private void datePicker1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_datePicker1ActionPerformed
        createChartScene();
    }//GEN-LAST:event_datePicker1ActionPerformed

    private void datePicker1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_datePicker1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_datePicker1KeyPressed

    private void topTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topTextFieldActionPerformed
        createChartScene();
    }//GEN-LAST:event_topTextFieldActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXDatePicker datePicker;
    private org.jdesktop.swingx.JXDatePicker datePicker1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField topTextField;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    final JFXPanel panel = new JFXPanel();

    private void onLoad() {
        initComponents();
        final Calendar c1 = Calendar.getInstance();
        c1.setTime(new Date());
        c1.set(Calendar.DATE, 1);
        datePicker.setDate(c1.getTime());
        createChartScene();
        jPanel1.add(panel, BorderLayout.CENTER);
    }

    private void createChartScene() {
        Platform.runLater(() -> {
            String x1 = "SELECT "
                    + "item_type.type, sum(sale_invoice_has_item.quantity*sale_invoice_has_item.rate) AS total "
                    + "FROM "
                    + "sale_invoice_has_item "
                    + "INNER JOIN sale_invoice ON sale_invoice_has_item.sale_invoice_inv_no = sale_invoice.inv_no "
                    + "INNER JOIN item ON sale_invoice_has_item.item_code = item.`code` "
                    + "INNER JOIN item_type ON item_type.type = item.item_type_type "
                    + "WHERE "
                    + "sale_invoice.inv_time  BETWEEN '" + yyyy_MM_dd.format(makeStartDate(datePicker.getDate())) + " 00:00:00' AND '" + yyyy_MM_dd.format(makeEndDate(datePicker1.getDate())) + " 23:59:59'"
                    + "GROUP BY item_type_type "
                    + "ORDER BY total DESC LIMIT " + Integer.parseInt(topTextField.getText().trim());
            //        System.out.println(x);
            ArrayList<PieChart.Data> pieChartData = new ArrayList<>();
            try (final PreparedStatement ps = manager.getConnection().prepareStatement(x1)) {
                ResultSet resultSet = ps.executeQuery();
                while (resultSet.next()) {
//                System.out.print(resultSet.getString("date_only") + " = ");
//                        System.out.println(nf2d.format(resultSet.getDouble("total")));

//                table.getColumns().add(new TableColumn(resultSet.getString("date_only").substring(resultSet.getString("date_only").lastIndexOf("-") + 1)));
                    pieChartData.add(new PieChart.Data(resultSet.getString("type") + " " + nf2d.format(resultSet.getDouble("total")), resultSet.getDouble("total")));
                }
            } catch (SQLException ex) {
                Exceptions.printStackTrace(ex);
            }
            final PieChart chart = new PieChart(FXCollections.observableArrayList(pieChartData));
            chart.setTitle("Income by category - " + yyyy_MM_dd.format(makeStartDate(datePicker.getDate())) + " to " + yyyy_MM_dd.format(makeEndDate(datePicker1.getDate())));
            Scene scene = new Scene(chart);
            panel.setScene(scene);
        });
    }
}
