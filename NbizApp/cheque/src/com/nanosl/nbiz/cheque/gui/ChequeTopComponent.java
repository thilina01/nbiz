/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.nanosl.nbiz.cheque.gui;

import com.nanosl.lib.date.JXDatePicker;
import com.nanosl.nbiz.cheque.NumberToWordsConverter;
import static com.nanosl.nbiz.util.Cell.coloredCellRenderer;
import com.nanosl.nbiz.util.Combo;
import static com.nanosl.nbiz.util.Format.nf2d;
import static com.nanosl.nbiz.util.Format.yyyy_MM_dd;
import com.nanosl.nbiz.util.NTopComponent;
import com.nanosl.nbiz.util.Printer;
import entity.Account;
import entity.IssuedCheque;
import entity.PurchaseInvoice;
import entity.Supplier;
import java.awt.Component;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.net.URL;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.swing.JComponent;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import query.Find;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.nanosl.nbiz.cheque.gui//Cheque//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ChequeTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "com.nanosl.nbiz.cheque.gui.ChequeTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ChequeAction",
        preferredID = "ChequeTopComponent"
)
@Messages({
    "CTL_ChequeAction=Cheque",
    "CTL_ChequeTopComponent=Cheque Window",
    "HINT_ChequeTopComponent=This is a Cheque window"
})
public final class ChequeTopComponent extends NTopComponent {

    public ChequeTopComponent() {
        onLoad();
    }

    protected void onLoad() {
        initComponents();
        setName(Bundle.CTL_ChequeTopComponent());
        setToolTipText(Bundle.HINT_ChequeTopComponent());
        KeyAdapter();
        tableModel = (DefaultTableModel) masterTable.getModel();
        masterTable.setDefaultRenderer(Object.class, coloredCellRenderer);
    }

    @Override
    public void setVisible(boolean b) {
        super.setVisible(b);
//        if (!b) {
//            Object o = supplierComboBox.getSelectedItem();
//            supplier = o instanceof Supplier ? (Supplier) o : null;
//            System.out.println("at setvisible !b " + supplier);
//        }
//        System.out.println("at setvisible " + supplier);
        Combo.fillSuppliers(supplierComboBox, null);
        Combo.fillBanks(accountComboBox);
        fill();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        datePicker = new JXDatePicker();
        jLabel2 = new javax.swing.JLabel();
        amountTextField = new javax.swing.JTextField();
        issueButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        chequeNumbertField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        accountComboBox = new javax.swing.JComboBox();
        supplierComboBox = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        masterScrollPane = new javax.swing.JScrollPane();
        masterTable = new javax.swing.JTable();
        startDatePicker = new JXDatePicker();
        jLabel4 = new javax.swing.JLabel();
        totalLabel = new javax.swing.JLabel();
        endDatePicker = new JXDatePicker();
        printButton = new javax.swing.JButton();
        allSimpleCheckBox = new javax.swing.JCheckBox();
        acPayOnlyCheckBox = new javax.swing.JCheckBox();

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(ChequeTopComponent.class, "ChequeTopComponent.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ChequeTopComponent.class, "ChequeTopComponent.jLabel1.text")); // NOI18N

        datePicker.setName("datePicker"); // NOI18N
        datePicker.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                datePickerKeyPressed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ChequeTopComponent.class, "ChequeTopComponent.jLabel2.text")); // NOI18N

        amountTextField.setText(org.openide.util.NbBundle.getMessage(ChequeTopComponent.class, "ChequeTopComponent.amountTextField.text")); // NOI18N
        amountTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amountTextFieldActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(issueButton, org.openide.util.NbBundle.getMessage(ChequeTopComponent.class, "ChequeTopComponent.issueButton.text")); // NOI18N
        issueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                issueButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(ChequeTopComponent.class, "ChequeTopComponent.jLabel6.text")); // NOI18N

        chequeNumbertField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chequeNumbertFieldActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel9, org.openide.util.NbBundle.getMessage(ChequeTopComponent.class, "ChequeTopComponent.jLabel9.text")); // NOI18N

        accountComboBox.setName("accountComboBox"); // NOI18N
        accountComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                accountComboBoxKeyPressed(evt);
            }
        });

        supplierComboBox.setName("supplierComboBox"); // NOI18N
        supplierComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                supplierComboBoxFocusGained(evt);
            }
        });
        supplierComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierComboBoxActionPerformed(evt);
            }
        });
        supplierComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                supplierComboBoxKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                supplierComboBoxKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(issueButton)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel9)
                            .addComponent(jLabel6)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(datePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chequeNumbertField, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(amountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(supplierComboBox, 0, 200, Short.MAX_VALUE)
                            .addComponent(accountComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {accountComboBox, amountTextField, chequeNumbertField, datePicker, supplierComboBox});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accountComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(chequeNumbertField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(datePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(supplierComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(amountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(issueButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        masterTable.setAutoCreateRowSorter(true);
        masterTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Number", "Amount", "Issued Date", "Banking Date", "Account", "Invoice", "Supplier", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        masterTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                masterTableMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                masterTableMouseReleased(evt);
            }
        });
        masterTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                masterTableKeyReleased(evt);
            }
        });
        masterScrollPane.setViewportView(masterTable);
        if (masterTable.getColumnModel().getColumnCount() > 0) {
            masterTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            masterTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(ChequeTopComponent.class, "ChequeTopComponent.masterTable.columnModel.title0")); // NOI18N
            masterTable.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(ChequeTopComponent.class, "ChequeTopComponent.masterTable.columnModel.title1")); // NOI18N
            masterTable.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(ChequeTopComponent.class, "ChequeTopComponent.masterTable.columnModel.title2")); // NOI18N
            masterTable.getColumnModel().getColumn(2).setCellRenderer(rightAlignCell);
            masterTable.getColumnModel().getColumn(3).setPreferredWidth(150);
            masterTable.getColumnModel().getColumn(3).setHeaderValue(org.openide.util.NbBundle.getMessage(ChequeTopComponent.class, "ChequeTopComponent.masterTable.columnModel.title3")); // NOI18N
            masterTable.getColumnModel().getColumn(4).setHeaderValue(org.openide.util.NbBundle.getMessage(ChequeTopComponent.class, "ChequeTopComponent.masterTable.columnModel.title4")); // NOI18N
            masterTable.getColumnModel().getColumn(5).setPreferredWidth(150);
            masterTable.getColumnModel().getColumn(5).setHeaderValue(org.openide.util.NbBundle.getMessage(ChequeTopComponent.class, "ChequeTopComponent.masterTable.columnModel.title5")); // NOI18N
            masterTable.getColumnModel().getColumn(6).setHeaderValue(org.openide.util.NbBundle.getMessage(ChequeTopComponent.class, "ChequeTopComponent.masterTable.columnModel.title6")); // NOI18N
            masterTable.getColumnModel().getColumn(7).setPreferredWidth(150);
            masterTable.getColumnModel().getColumn(7).setHeaderValue(org.openide.util.NbBundle.getMessage(ChequeTopComponent.class, "ChequeTopComponent.masterTable.columnModel.title7")); // NOI18N
            masterTable.getColumnModel().getColumn(8).setHeaderValue(org.openide.util.NbBundle.getMessage(ChequeTopComponent.class, "ChequeTopComponent.masterTable.columnModel.title8")); // NOI18N
        }

        startDatePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startDatePickerActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(ChequeTopComponent.class, "ChequeTopComponent.jLabel4.text")); // NOI18N

        totalLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        totalLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        org.openide.awt.Mnemonics.setLocalizedText(totalLabel, org.openide.util.NbBundle.getMessage(ChequeTopComponent.class, "ChequeTopComponent.totalLabel.text")); // NOI18N

        endDatePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endDatePickerActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(printButton, org.openide.util.NbBundle.getMessage(ChequeTopComponent.class, "ChequeTopComponent.printButton.text")); // NOI18N
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(allSimpleCheckBox, org.openide.util.NbBundle.getMessage(ChequeTopComponent.class, "ChequeTopComponent.allSimpleCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(acPayOnlyCheckBox, org.openide.util.NbBundle.getMessage(ChequeTopComponent.class, "ChequeTopComponent.acPayOnlyCheckBox.text")); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(startDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(endDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(printButton)
                        .addGap(18, 18, 18)
                        .addComponent(allSimpleCheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(acPayOnlyCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(totalLabel))
                    .addComponent(masterScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 856, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(endDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(masterScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalLabel)
                    .addComponent(printButton)
                    .addComponent(allSimpleCheckBox)
                    .addComponent(acPayOnlyCheckBox))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void datePickerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_datePickerKeyPressed
        if (evt.getKeyCode() == 10) {
            supplierComboBox.requestFocus();
        }
    }//GEN-LAST:event_datePickerKeyPressed

    private void issueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_issueButtonActionPerformed
        issue();
    }//GEN-LAST:event_issueButtonActionPerformed

    private void chequeNumbertFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chequeNumbertFieldActionPerformed
        if (chequeNumbertField.getText().trim().length() > 0) {
            datePicker.requestFocus();
        }
    }//GEN-LAST:event_chequeNumbertFieldActionPerformed

    private void accountComboBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_accountComboBoxKeyPressed
        if (evt.getKeyCode() == 10) {
            chequeNumbertField.requestFocus();
        }
    }//GEN-LAST:event_accountComboBoxKeyPressed

    private void supplierComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierComboBoxActionPerformed
//        fillItems();
//        Object o = supplierComboBox.getSelectedItem();
//        if (o instanceof Supplier) {
//            supplier = (Supplier) o;
//        }
    }//GEN-LAST:event_supplierComboBoxActionPerformed

    private void supplierComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_supplierComboBoxFocusGained
        //        searchSupplier();
    }//GEN-LAST:event_supplierComboBoxFocusGained

    private void supplierComboBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_supplierComboBoxKeyPressed
        if (evt.getKeyCode() == 10) {
            amountTextField.requestFocus();
        }
//        else if (evt.getKeyCode() == KeyEvent.VK_F2) {
//            searchSupplier();
//        }
    }//GEN-LAST:event_supplierComboBoxKeyPressed

    private void supplierComboBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_supplierComboBoxKeyReleased

    }//GEN-LAST:event_supplierComboBoxKeyReleased

    private void masterTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_masterTableMouseReleased

    }//GEN-LAST:event_masterTableMouseReleased

    private void masterTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_masterTableMouseClicked

    }//GEN-LAST:event_masterTableMouseClicked

    private void masterTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_masterTableKeyReleased

    }//GEN-LAST:event_masterTableKeyReleased

    private void startDatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startDatePickerActionPerformed
        fill();
    }//GEN-LAST:event_startDatePickerActionPerformed

    private void endDatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endDatePickerActionPerformed
        fill();
    }//GEN-LAST:event_endDatePickerActionPerformed

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed

        try {
            int selectedRow = masterTable.getSelectedRow();
            if (selectedRow >= 0) {
                URL url = getClass().getResource("/com/nanosl/nbiz/cheque/jrxml/cheque.jasper");
                Object object = JRLoader.loadObject(url);//"src/com/nanosl/nbiz/gui/jrxml/report1.jasper"
                if (object == null) {
                    showError("Unable to print");
                    return;
                }
                String supplierName = masterTable.getValueAt(selectedRow, 7).toString();
                JasperReport report = (JasperReport) object;
                Map<String, Object> params = new LinkedHashMap<>();
                params.put("SUPPLIER", allSimpleCheckBox.isSelected() ? supplierName.toLowerCase() : supplierName);
                params.put("AMOUNT", "**" + masterTable.getValueAt(selectedRow, 2) + "**");
                params.put("ACPAY", acPayOnlyCheckBox.isSelected());
                String bankingDate = dd_MM_yyyy_FOR_CHEQUE.format(yyyy_MM_dd.parse(masterTable.getValueAt(selectedRow, 4).toString()));
                for (int i = 0; i < bankingDate.length(); i++) {
                    params.put("BANKING_DATE" + (i + 1), bankingDate.charAt(i) + "");
                }
                params.put("AMOUNT_IN_TEXT", NumberToWordsConverter.convert(Double.valueOf(masterTable.getValueAt(selectedRow, 2).toString().replace(",", ""))));
                Printer.printSatic(report, params);
            }
        } catch (JRException | ParseException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_printButtonActionPerformed

    private void amountTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amountTextFieldActionPerformed
        issue();        // TODO add your handling code here:
    }//GEN-LAST:event_amountTextFieldActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox acPayOnlyCheckBox;
    private javax.swing.JComboBox accountComboBox;
    private javax.swing.JCheckBox allSimpleCheckBox;
    private javax.swing.JTextField amountTextField;
    private javax.swing.JTextField chequeNumbertField;
    private org.jdesktop.swingx.JXDatePicker datePicker;
    private org.jdesktop.swingx.JXDatePicker endDatePicker;
    private javax.swing.JButton issueButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane masterScrollPane;
    private javax.swing.JTable masterTable;
    private javax.swing.JButton printButton;
    private org.jdesktop.swingx.JXDatePicker startDatePicker;
    private javax.swing.JComboBox supplierComboBox;
    private javax.swing.JLabel totalLabel;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private void issue() {

        double amount = Double.valueOf(amountTextField.getText().trim());
        Date date = datePicker.getDate();
        Supplier supplier = (Supplier) supplierComboBox.getSelectedItem();

        //=====================================
        String chequeNumber = chequeNumbertField.getText().trim();
        IssuedCheque issuedCheque = new IssuedCheque(chequeNumber);
        issuedCheque.setAmount(amount);
        issuedCheque.setAccount((Account) accountComboBox.getSelectedItem());
        issuedCheque.setBankingDate(date);
        issuedCheque.setIssuedDate(new Date());
//            issuedCheque.set
        ArrayList<PurchaseInvoice> purchaseInvoicesOfCheque = new ArrayList<>();
        purchaseInvoicesOfCheque.add(new PurchaseInvoice(chequeNumber, supplier.getCode()));
        issuedCheque.setPurchaseInvoiceCollection(purchaseInvoicesOfCheque);
        issuedCheque.setStatus(0);
        manager.update(issuedCheque);
        fill();
//            serializables.add(issuedCheque);
//            purchaseInvoice.getIssuedChequeCollection().add(issuedCheque);

    }

    private void KeyAdapter() {
        AutoCompleteDecorator.decorate(accountComboBox);
        AutoCompleteDecorator.decorate(supplierComboBox);
        setComboBoxKeyAdapters(accountComboBox);
        setComboBoxKeyAdapters(datePicker);
        setComboBoxKeyAdapters(supplierComboBox);
    }

    private void setComboBoxKeyAdapters(JComponent comp) {
        String compName = comp.getName();
        Component component[] = comp.getComponents();
        for (Component component1 : component) {
            switch (compName) {
                case "bankComboBox":
                    component1.addKeyListener(bankComboBoxKeyAdapter);
                    break;
                case "datePicker":
                    component1.addKeyListener(bankingDatePickerKeyAdapter);
                    break;
                case "supplierComboBox":
                    component1.addKeyListener(supplierComboBoxKeyAdapter);
                    break;
            }
        }
    }
    KeyAdapter bankComboBoxKeyAdapter = new java.awt.event.KeyAdapter() {
        @Override
        public void keyPressed(KeyEvent evt) {
            accountComboBoxKeyPressed(evt);
        }
    };
    KeyAdapter bankingDatePickerKeyAdapter = new java.awt.event.KeyAdapter() {
        @Override
        public void keyPressed(KeyEvent evt) {
            datePickerKeyPressed(evt);
        }
    };
    KeyAdapter supplierComboBoxKeyAdapter = new java.awt.event.KeyAdapter() {
        @Override
        public void keyPressed(KeyEvent evt) {
            supplierComboBoxKeyPressed(evt);
        }
    };

    DefaultTableModel tableModel;

    private void fillTable() {
        tableModel.setRowCount(0);
        Date startDate = startDatePicker.getDate();
        Date endDate = endDatePicker.getDate();
        //ALTER TABLE `sgm`.`purchase_invoice` CHANGE COLUMN `inv_time` `inv_date` DATE NULL DEFAULT NULL  ;
//        manager.clearCache();

        Collection<IssuedCheque> issuedCheques = Find.issuedChequeByDates(makeStartDate(startDate), makeEndDate(endDate));
        if (issuedCheques == null) {
            showSuccess("No Record Found!");
            return;
        }
        int i = 0;
        for (IssuedCheque issuedCheque : issuedCheques) {
            Collection<PurchaseInvoice> purchaseInvoices = issuedCheque.getPurchaseInvoiceCollection();
            String invoiceNumbers = "";
            String supplierName = "";
            boolean flag = true;
            for (PurchaseInvoice purchaseInvoice : purchaseInvoices) {
                if (invoiceNumbers.length() > 0) {
                    invoiceNumbers += ", ";
                }
                if (flag) {
                    supplierName = purchaseInvoice != null ? purchaseInvoice.getSupplier() != null ? purchaseInvoice.getSupplier().getName() != null ? purchaseInvoice.getSupplier().getName() : "" : "" : "";
                    flag = false;
                }
                invoiceNumbers += purchaseInvoice.getPurchaseInvoicePK().getInvNo();
            }
            Object[] row = {
                ++i,
                issuedCheque.getChequeNumber(),
                nf2dComma.format(issuedCheque.getAmount()),
                yyyy_MM_dd_hh_mm_ss_a.format(issuedCheque.getIssuedDate()),
                yyyy_MM_dd.format(issuedCheque.getBankingDate()),
                issuedCheque.getAccount(),
                invoiceNumbers,
                supplierName
            };
            tableModel.addRow(row);
        }
        calcTotal();
    }

    private void fill() {
        fillTable();
        calcTotal();
    }

    private void calcTotal() {
        double total = 0;
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            total += Double.valueOf(tableModel.getValueAt(i, 2).toString().replace(",", ""));
        }
        totalLabel.setText(nf2d.format(total));
    }
}
