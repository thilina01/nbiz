/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.nanosl.nbiz.main;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.StreamCorruptedException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import org.openide.util.Exceptions;
import java.awt.Window;
import javax.swing.SwingUtilities;
import javax.swing.JOptionPane;

/**
 *
 * @author Thilina
 */
public class Configuration extends javax.swing.JDialog {

    private static Configuration instance;

    private static Configuration getInstance() {
        if (instance == null) {
            instance = new Configuration(new javax.swing.JFrame(), true);

            instance.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
        }
        return instance;
    }

    public static void display() {

        getInstance().setVisible(true);
//        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
////                Configuration instance = new Configuration(new javax.swing.JFrame(), true);
//
//            }
//        });
    }

    /**
     * Creates new form Configuration
     */
    public Configuration(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        defaultTableModel = (DefaultTableModel) table.getModel();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        serverTextField = new javax.swing.JTextField();
        databaseTextField = new javax.swing.JTextField();
        configNameTextField = new javax.swing.JTextField();
        saveButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(Configuration.class, "Configuration.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(Configuration.class, "Configuration.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(Configuration.class, "Configuration.jLabel3.text")); // NOI18N

        serverTextField.setText(org.openide.util.NbBundle.getMessage(Configuration.class, "Configuration.serverTextField.text")); // NOI18N
        serverTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverTextFieldActionPerformed(evt);
            }
        });

        databaseTextField.setText(org.openide.util.NbBundle.getMessage(Configuration.class, "Configuration.databaseTextField.text")); // NOI18N
        databaseTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                databaseTextFieldActionPerformed(evt);
            }
        });

        configNameTextField.setText(org.openide.util.NbBundle.getMessage(Configuration.class, "Configuration.configNameTextField.text")); // NOI18N
        configNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configNameTextFieldActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(saveButton, org.openide.util.NbBundle.getMessage(Configuration.class, "Configuration.saveButton.text")); // NOI18N
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Server", "Database", "Config Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(Configuration.class, "Configuration.table.columnModel.title0")); // NOI18N
            table.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(Configuration.class, "Configuration.table.columnModel.title1")); // NOI18N
            table.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(Configuration.class, "Configuration.table.columnModel.title2")); // NOI18N
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(39, 39, 39)
                        .addComponent(serverTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(databaseTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(configNameTextField))
                    .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {configNameTextField, databaseTextField, serverTextField});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(serverTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(databaseTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(configNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(saveButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        write();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void serverTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverTextFieldActionPerformed
        if (serverTextField.getText().trim().length() > 0) {
            databaseTextField.requestFocus();
        }
    }//GEN-LAST:event_serverTextFieldActionPerformed

    private void databaseTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_databaseTextFieldActionPerformed
        if (databaseTextField.getText().trim().length() > 0) {
            configNameTextField.requestFocus();
        }
    }//GEN-LAST:event_databaseTextFieldActionPerformed

    private void configNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configNameTextFieldActionPerformed
        addToTable();
    }//GEN-LAST:event_configNameTextFieldActionPerformed

    private static final String confFileName = "NconfN";
    private static final File file = new File(confFileName);

    public void write() {
        FileOutputStream fout = null;
        try {
//            HashMap<String, String> objects = new HashMap<>();
//            String conf = JOptionPane.showInputDialog("Configurations");
//            if (conf == null) {
//                return;
//            }
//            String[] options = conf.split(",");
//            for (String option : options) {
//                String[] strings = option.trim().split("-");
//                objects.put(strings[0].trim(), strings[1].trim());
//            }
////            for (int ii = 0; ii < 10; ii++) {
////                objects.add("Object to file: " + ii);
////            }
            fout = new FileOutputStream(file);
            ObjectOutputStream oos = new ObjectOutputStream(fout);

            java.util.Collection<Config> configs = new java.util.ArrayList<>();
            for (int i = 0; i < table.getRowCount(); i++) {
                Config config = new Config();
                config.setServer(table.getValueAt(i, 0).toString());
                config.setDatabase(table.getValueAt(i, 1).toString());
                config.setName(table.getValueAt(i, 2).toString());
                configs.add(config);
            }

            oos.writeObject(configs);
//            config.describe();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Installer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Installer.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (fout != null) {
                    fout.close();
                    System.exit(0);
//                    read();
                }
            } catch (IOException ex) {
                Logger.getLogger(Installer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Configuration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Configuration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Configuration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Configuration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        display();
    }

    public static Config read() {

        FileInputStream fis = null;
        try {
            fis = new FileInputStream(file);
            ObjectInputStream ois = new ObjectInputStream(fis);
            java.util.ArrayList<Config> configs = (java.util.ArrayList<Config>) ois.readObject();
            if (configs.size() == 1) {
                return configs.get(0);
            }
            final javax.swing.JComboBox<Config> jcb = new javax.swing.JComboBox(configs.toArray());
            jcb.requestFocus();

            jcb.addKeyListener(new java.awt.event.KeyAdapter() {
                @Override
                public void keyPressed(java.awt.event.KeyEvent evt) {
                    if (evt.getKeyCode() == 10) {
                        Window w = SwingUtilities.getWindowAncestor(jcb);

                        if (w != null) {
                            w.setVisible(false);
                        }
                    }
                }
            });
            JOptionPane.showOptionDialog(null, jcb, "select system", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, new Object[]{}, null);

            return (Config) jcb.getSelectedItem();
            //********************************************************************************/
//            config.describe();
//            return config;
//            Map<String, String> readObjects = (Map) ois.readObject();
////                for (Object object : readObjects) {
////                    // prove we have read them successfully
////                    System.out.println(object);
////                }
//            if (readObjects.size() == 1) {
//
////                System.out.println(readObjects.values().iterator().next());
//                return readObjects.values().iterator().next();
//            }
//            final JComboBox jcb = new JComboBox(readObjects.keySet().toArray());
//            jcb.requestFocus();
//
//            jcb.addKeyListener(new java.awt.event.KeyAdapter() {
//                @Override
//                public void keyPressed(java.awt.event.KeyEvent evt) {
//                    if (evt.getKeyCode() == 10) {
//                        Window w = SwingUtilities.getWindowAncestor(jcb);
//
//                        if (w != null) {
//                            w.setVisible(false);
//                        }
//                    }
//                }
//            });
//            JOptionPane.showOptionDialog(null, jcb, "select system", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, new Object[]{}, null);
//
//            return readObjects.get(jcb.getSelectedItem().toString());
        } catch (StreamCorruptedException sce) {
//            getInstance().write();
            return read();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Installer.class.getName()).log(Level.SEVERE, null, ex);
//            getInstance().write();
            return read();
        } catch (IOException ex) {
            Logger.getLogger(Installer.class.getName()).log(Level.SEVERE, null, ex);
//            getInstance().write();
            return read();
        } catch (ClassNotFoundException ex) {
            Exceptions.printStackTrace(ex);
            return read();
        } finally {
            try {
                if (fis != null) {
                    fis.close();
                }
            } catch (IOException ex) {
                Logger.getLogger(Installer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField configNameTextField;
    private javax.swing.JTextField databaseTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField serverTextField;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    javax.swing.table.DefaultTableModel defaultTableModel;

    private void addToTable() {
        Object[] row = {serverTextField.getText().trim(), databaseTextField.getText().trim(), configNameTextField.getText().trim()};
        defaultTableModel.addRow(row);
        serverTextField.setText("");
        databaseTextField.setText("");
        configNameTextField.setText("");
        serverTextField.requestFocus();
    }
}
