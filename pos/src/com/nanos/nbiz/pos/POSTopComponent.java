/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.nanos.nbiz.pos;

import com.nanosl.nbiz.util.search.SearchItemDialog;
import com.nanosl.nbiz.util.search.SearchInvoiceDialog;
import com.nanosl.nbiz.util.search.SearchCustomerDialog;
import com.nanosl.nbiz.util.Combo;
import com.nanosl.nbiz.util.Convert;
import com.nanosl.nbiz.util.Data;
import com.nanosl.nbiz.util.FindMySql;
import static com.nanosl.nbiz.util.Format.yyyy_MM_dd;
import com.nanosl.nbiz.util.NTopComponent;
import com.nanosl.nbiz.util.Printer;
import entity.CashBox;
import entity.CashLog;
import entity.CollectionReceipt;
import entity.Config;
import entity.Customer;
import entity.Employee;
import entity.Item;
import entity.Person;
import entity.PriceList;
import entity.Quotation;
import entity.QuotationHasItem;
import entity.SaleCash;
import entity.SaleInvoice;
import entity.SaleInvoiceHasItem;
import entity.SaleInvoiceHasItemPK;
import entity.Stock;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.io.Serializable;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Map;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.StatusDisplayer;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * POSTop component which displays Point of sales input form.
 */
@ConvertAsProperties(
        dtd = "-//com.nanos.nbiz.pos//POS//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "POSTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ONLY_OPENED)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "com.nanos.nbiz.pos.POSTopComponent")
@ActionReference(path = "Menu/Sales" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_POSAction",
        preferredID = "POSTopComponent")
@Messages({
    "CTL_POSAction=POS",
    "CTL_POSTopComponent=POS Window",
    "HINT_POSTopComponent=This is a POS window"
})
public final class POSTopComponent extends NTopComponent {

    public POSTopComponent() {
        onLoad();
        System.currentTimeMillis();
        setName(Bundle.CTL_POSTopComponent());
        setToolTipText(Bundle.HINT_POSTopComponent());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        itemComboBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        quantityField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        priceField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        processButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        discountField = new javax.swing.JTextField();
        quantityLabel = new javax.swing.JLabel();
        printCheckBox = new javax.swing.JCheckBox();
        anotherButton = new javax.swing.JButton();
        searchItemButton = new javax.swing.JButton();
        receiptPanel = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        receiptNumberField = new javax.swing.JTextField();
        lastInvoiceNumberField = new javax.swing.JTextField();
        saleInvoiceComboBox = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        cashBoxComboBox = new javax.swing.JComboBox();
        quotationCheckBox = new javax.swing.JCheckBox();
        invoicePanel = new javax.swing.JPanel();
        invoiceNumberField = new javax.swing.JTextField();
        invoiceCheckBox = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        datePicker = new com.nanosl.lib.date.JXDatePicker();
        jLabel1 = new javax.swing.JLabel();
        customerPanel = new javax.swing.JPanel();
        customerComboBox = new javax.swing.JComboBox<>();
        searchCustomerButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        remainingAmountLabel = new javax.swing.JLabel();
        discountPercentageField = new javax.swing.JTextField();
        paidAmountLabel = new javax.swing.JLabel();
        paidByCCField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        paidByCCLabel = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        employeeComboBox = new javax.swing.JComboBox<Employee>();
        paidAmountField = new javax.swing.JTextField();
        totalDiscountField = new javax.swing.JTextField();
        remainingAmountField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        totalAmountField = new javax.swing.JTextField();
        paidByCCLabel1 = new javax.swing.JLabel();

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.jLabel4.text")); // NOI18N

        itemComboBox.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        itemComboBox.setName("itemComboBox"); // NOI18N
        itemComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                itemComboBoxFocusGained(evt);
            }
        });
        itemComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemComboBoxMouseClicked(evt);
            }
        });
        itemComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemComboBoxActionPerformed(evt);
            }
        });
        itemComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                itemComboBoxKeyPressed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.jLabel5.text")); // NOI18N

        quantityField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        quantityField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityFieldActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.jLabel6.text")); // NOI18N

        priceField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        priceField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceFieldActionPerformed(evt);
            }
        });

        table.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Code", "Description", "Price", "Quantity", "Net", "Discount", "D%", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setMinWidth(50);
            table.getColumnModel().getColumn(0).setPreferredWidth(50);
            table.getColumnModel().getColumn(0).setMaxWidth(50);
            table.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.table.columnModel.title8_1")); // NOI18N
            table.getColumnModel().getColumn(1).setPreferredWidth(50);
            table.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.table.columnModel.title1")); // NOI18N
            table.getColumnModel().getColumn(2).setPreferredWidth(300);
            table.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.table.columnModel.title2")); // NOI18N
            table.getColumnModel().getColumn(3).setHeaderValue(org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.table.columnModel.title3")); // NOI18N
            table.getColumnModel().getColumn(3).setCellRenderer(rightAlignCell);
            table.getColumnModel().getColumn(4).setHeaderValue(org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.table.columnModel.title4")); // NOI18N
            table.getColumnModel().getColumn(4).setCellRenderer(rightAlignCell);
            table.getColumnModel().getColumn(5).setHeaderValue(org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.table.columnModel.title5")); // NOI18N
            table.getColumnModel().getColumn(5).setCellRenderer(rightAlignCell);
            table.getColumnModel().getColumn(6).setHeaderValue(org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.table.columnModel.title6")); // NOI18N
            table.getColumnModel().getColumn(6).setCellRenderer(rightAlignCell);
            table.getColumnModel().getColumn(7).setPreferredWidth(50);
            table.getColumnModel().getColumn(7).setHeaderValue(org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.table.columnModel.title7")); // NOI18N
            table.getColumnModel().getColumn(7).setCellRenderer(rightAlignCell);
            table.getColumnModel().getColumn(8).setHeaderValue(org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.table.columnModel.title8")); // NOI18N
            table.getColumnModel().getColumn(8).setCellRenderer(rightAlignCell);
        }

        processButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(processButton, org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.processButton.text")); // NOI18N
        processButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processButtonActionPerformed(evt);
            }
        });

        clearButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(clearButton, org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.clearButton.text")); // NOI18N
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.jLabel7.text")); // NOI18N

        discountField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        discountField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discountFieldActionPerformed(evt);
            }
        });

        quantityLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(quantityLabel, org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.quantityLabel.text")); // NOI18N
        quantityLabel.setName("quantityLabel"); // NOI18N

        printCheckBox.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(printCheckBox, org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.printCheckBox.text")); // NOI18N

        anotherButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(anotherButton, org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.anotherButton.text")); // NOI18N
        anotherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anotherButtonActionPerformed(evt);
            }
        });

        searchItemButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(searchItemButton, org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.searchItemButton.text")); // NOI18N
        searchItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchItemButtonActionPerformed(evt);
            }
        });

        receiptPanel.setName("receiptPanel"); // NOI18N

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel12, org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.jLabel12.text")); // NOI18N

        receiptNumberField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        receiptNumberField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receiptNumberFieldActionPerformed(evt);
            }
        });
        receiptNumberField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                receiptNumberFieldKeyReleased(evt);
            }
        });

        lastInvoiceNumberField.setEditable(false);
        lastInvoiceNumberField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lastInvoiceNumberField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        lastInvoiceNumberField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastInvoiceNumberFieldActionPerformed(evt);
            }
        });

        saleInvoiceComboBox.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        saleInvoiceComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "a", "b", "c", "d" }));
        saleInvoiceComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saleInvoiceComboBoxActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel13, org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.jLabel13.text")); // NOI18N

        cashBoxComboBox.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        cashBoxComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "a", "b", "c", "d" }));
        cashBoxComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cashBoxComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout receiptPanelLayout = new javax.swing.GroupLayout(receiptPanel);
        receiptPanel.setLayout(receiptPanelLayout);
        receiptPanelLayout.setHorizontalGroup(
            receiptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(receiptPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(receiptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lastInvoiceNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(receiptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saleInvoiceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cashBoxComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(receiptNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        receiptPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cashBoxComboBox, receiptNumberField, saleInvoiceComboBox});

        receiptPanelLayout.setVerticalGroup(
            receiptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(receiptPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(receiptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(receiptNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(receiptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastInvoiceNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saleInvoiceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(receiptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cashBoxComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        quotationCheckBox.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(quotationCheckBox, org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.quotationCheckBox.text")); // NOI18N
        quotationCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quotationCheckBoxActionPerformed(evt);
            }
        });

        invoicePanel.setName("invoicePanel"); // NOI18N

        invoiceNumberField.setEditable(false);
        invoiceNumberField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        invoiceNumberField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        invoiceNumberField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                invoiceNumberFieldMouseClicked(evt);
            }
        });
        invoiceNumberField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invoiceNumberFieldActionPerformed(evt);
            }
        });
        invoiceNumberField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                invoiceNumberFieldKeyPressed(evt);
            }
        });

        invoiceCheckBox.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(invoiceCheckBox, org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.invoiceCheckBox.text")); // NOI18N
        invoiceCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invoiceCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout invoicePanelLayout = new javax.swing.GroupLayout(invoicePanel);
        invoicePanel.setLayout(invoicePanelLayout);
        invoicePanelLayout.setHorizontalGroup(
            invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(invoicePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(invoiceCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(invoiceNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        invoicePanelLayout.setVerticalGroup(
            invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(invoicePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(invoiceNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(invoiceCheckBox))
                .addContainerGap())
        );

        datePicker.setName("datePicker"); // NOI18N
        datePicker.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                datePickerKeyPressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.jLabel1.text")); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(datePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(datePicker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        customerPanel.setName("customerPanel"); // NOI18N

        customerComboBox.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        customerComboBox.setName("customerComboBox"); // NOI18N
        customerComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                customerComboBoxFocusGained(evt);
            }
        });
        customerComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                customerComboBoxKeyPressed(evt);
            }
        });

        searchCustomerButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(searchCustomerButton, org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.searchCustomerButton.text")); // NOI18N
        searchCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchCustomerButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.jLabel3.text")); // NOI18N

        javax.swing.GroupLayout customerPanelLayout = new javax.swing.GroupLayout(customerPanel);
        customerPanel.setLayout(customerPanelLayout);
        customerPanelLayout.setHorizontalGroup(
            customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(customerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchCustomerButton)
                .addContainerGap())
        );
        customerPanelLayout.setVerticalGroup(
            customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(customerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchCustomerButton))
                .addContainerGap())
        );

        jPanel2.setLayout(new java.awt.GridBagLayout());

        remainingAmountLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(remainingAmountLabel, org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.remainingAmountLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        jPanel2.add(remainingAmountLabel, gridBagConstraints);

        discountPercentageField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        discountPercentageField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        discountPercentageField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                discountPercentageFieldFocusLost(evt);
            }
        });
        discountPercentageField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discountPercentageFieldActionPerformed(evt);
            }
        });
        discountPercentageField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                discountPercentageFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                discountPercentageFieldKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 75;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel2.add(discountPercentageField, gridBagConstraints);

        paidAmountLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(paidAmountLabel, org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.paidAmountLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        jPanel2.add(paidAmountLabel, gridBagConstraints);

        paidByCCField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        paidByCCField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        paidByCCField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                paidByCCFieldFocusGained(evt);
            }
        });
        paidByCCField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paidByCCFieldActionPerformed(evt);
            }
        });
        paidByCCField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                paidByCCFieldKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 75;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel2.add(paidByCCField, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.jLabel8.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        jPanel2.add(jLabel8, gridBagConstraints);

        paidByCCLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(paidByCCLabel, org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.paidByCCLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel2.add(paidByCCLabel, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel9, org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.jLabel9.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        jPanel2.add(jLabel9, gridBagConstraints);

        employeeComboBox.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        employeeComboBox.setName("employeeComboBox"); // NOI18N
        employeeComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                employeeComboBoxMouseClicked(evt);
            }
        });
        employeeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeComboBoxActionPerformed(evt);
            }
        });
        employeeComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                employeeComboBoxKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 162;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel2.add(employeeComboBox, gridBagConstraints);

        paidAmountField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        paidAmountField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        paidAmountField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                paidAmountFieldFocusGained(evt);
            }
        });
        paidAmountField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paidAmountFieldActionPerformed(evt);
            }
        });
        paidAmountField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                paidAmountFieldKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 135;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel2.add(paidAmountField, gridBagConstraints);

        totalDiscountField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        totalDiscountField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        totalDiscountField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                totalDiscountFieldFocusLost(evt);
            }
        });
        totalDiscountField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalDiscountFieldActionPerformed(evt);
            }
        });
        totalDiscountField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                totalDiscountFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                totalDiscountFieldKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 135;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel2.add(totalDiscountField, gridBagConstraints);

        remainingAmountField.setEditable(false);
        remainingAmountField.setBackground(new java.awt.Color(255, 255, 255));
        remainingAmountField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        remainingAmountField.setForeground(new java.awt.Color(51, 0, 102));
        remainingAmountField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 135;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel2.add(remainingAmountField, gridBagConstraints);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel10, org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.jLabel10.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel2.add(jLabel10, gridBagConstraints);

        totalAmountField.setEditable(false);
        totalAmountField.setBackground(new java.awt.Color(255, 255, 255));
        totalAmountField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        totalAmountField.setForeground(new java.awt.Color(51, 0, 102));
        totalAmountField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        totalAmountField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalAmountFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 135;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel2.add(totalAmountField, gridBagConstraints);

        paidByCCLabel1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(paidByCCLabel1, org.openide.util.NbBundle.getMessage(POSTopComponent.class, "POSTopComponent.paidByCCLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel2.add(paidByCCLabel1, gridBagConstraints);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(itemComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(quantityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchItemButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(quantityField, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(discountField, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(invoicePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(customerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 287, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(quotationCheckBox))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(processButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(clearButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(anotherButton))
                            .addComponent(receiptPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(printCheckBox))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(invoicePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(customerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 1, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(itemComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quantityLabel)
                    .addComponent(searchItemButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(quantityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(discountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quotationCheckBox))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(processButton)
                            .addComponent(clearButton)
                            .addComponent(anotherButton)
                            .addComponent(printCheckBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(receiptPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void datePickerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_datePickerKeyPressed
        if (evt.getKeyCode() == 10) {
            customerComboBox.requestFocus();
        }
    }//GEN-LAST:event_datePickerKeyPressed

    private void invoiceNumberFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invoiceNumberFieldActionPerformed
        if (!invoiceNumberField.getText().trim().equals("")) {
            datePicker.requestFocus();
        }
    }//GEN-LAST:event_invoiceNumberFieldActionPerformed

    private void customerComboBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customerComboBoxKeyPressed
        if (evt.getKeyCode() == 10) {
            itemComboBox.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_F2) {
            searchCustomer();
        }
    }//GEN-LAST:event_customerComboBoxKeyPressed

    private void itemComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemComboBoxActionPerformed
        Item item = (Item) itemComboBox.getSelectedItem();
        if (item == null) {
            return;
        }
        PriceList priceList = item.getPriceList();
        manager.clearCache();
//        Stock stock = manager.find(Stock.class, item.getCode());
        double quantity = FindMySql.quantityByItemCode(item.getCode());
//        double quantity = stock.getQuantity() == null ? 0 : item.getStock().getQuantity();
        quantityLabel.setText(nf2d.format(quantity));
        double price = priceList.getSellingPack() == null ? 0 : priceList.getSellingPack();
        priceField.setText(nf2d.format(price));
    }//GEN-LAST:event_itemComboBoxActionPerformed

    private void itemComboBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemComboBoxKeyPressed
        int keyCode = evt.getKeyCode();
        switch (keyCode) {
            case 10:
                Item item = (Item) itemComboBox.getSelectedItem();
                if (item == null) {
                    return;
                }
                quantityField.requestFocus();
                break;
            case 192:
            case KeyEvent.VK_ADD:
            case KeyEvent.VK_RIGHT:
                if (employeeComboBox.isVisible()) {
                    employeeComboBox.requestFocus();
                } else {
                    totalDiscountField.requestFocus();
                }
                break;
            case KeyEvent.VK_F2:
//                break;
            default:
                if ((keyCode > 47 && keyCode < 58) || (keyCode > 64 && keyCode < 91) || (keyCode > 95 && keyCode < 106)) {
                    searchItem(evt.getKeyChar() + "");
                }
                break;
        }
    }//GEN-LAST:event_itemComboBoxKeyPressed

    private void quantityFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityFieldActionPerformed
        String quantityString = quantityField.getText().trim();
        try {
            double quantity = Double.parseDouble(quantityString);
            priceField.setSelectionStart(0);
            priceField.requestFocus();
        } catch (NumberFormatException e) {
        }
    }//GEN-LAST:event_quantityFieldActionPerformed

    private void priceFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceFieldActionPerformed
        addToTable();
        itemComboBox.requestFocus();
    }//GEN-LAST:event_priceFieldActionPerformed

    private void tableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableKeyReleased
        if (evt.getKeyCode() == 127 && table.getSelectedRow() > -1) {
            tableModel.removeRow(table.getSelectedRow());
            calcTotal();
        }
    }//GEN-LAST:event_tableKeyReleased

    private void processButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processButtonActionPerformed
        process();
    }//GEN-LAST:event_processButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        clear();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void totalDiscountFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalDiscountFieldActionPerformed
        calcDiscount();
        paidAmountField.requestFocus();
        paidAmountField.selectAll();
        if (quotationCheckBox.isSelected()) {
            processButton.requestFocus();
        }
    }//GEN-LAST:event_totalDiscountFieldActionPerformed

    private void totalDiscountFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_totalDiscountFieldKeyReleased
        if (totalDiscountField.getText().equals("`") || totalDiscountField.getText().equals("+")) {
            totalDiscountField.setText("0");
            totalDiscountField.selectAll();
        }
//        substractDiscount();
    }//GEN-LAST:event_totalDiscountFieldKeyReleased

    private void discountFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discountFieldActionPerformed
        addToTable();
        itemComboBox.requestFocus();
    }//GEN-LAST:event_discountFieldActionPerformed

    private void paidAmountFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paidAmountFieldActionPerformed
        process();
    }//GEN-LAST:event_paidAmountFieldActionPerformed

    private void paidAmountFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paidAmountFieldKeyReleased
        if (paidAmountField.getText().equals("`") || paidAmountField.getText().equals("+")) {
            paidAmountField.setText("0");
            paidAmountField.selectAll();
        }
        calcRemaining();
    }//GEN-LAST:event_paidAmountFieldKeyReleased

    private void searchCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCustomerButtonActionPerformed
        searchCustomer();
    }//GEN-LAST:event_searchCustomerButtonActionPerformed

    private void receiptNumberFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receiptNumberFieldActionPerformed
        paidAmountField.requestFocus();
    }//GEN-LAST:event_receiptNumberFieldActionPerformed

    private void receiptNumberFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_receiptNumberFieldKeyReleased
    }//GEN-LAST:event_receiptNumberFieldKeyReleased

    private void customerComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerComboBoxFocusGained
        StatusDisplayer.getDefault().setStatusText("F2 for Search");
    }//GEN-LAST:event_customerComboBoxFocusGained

    private void itemComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_itemComboBoxFocusGained
        StatusDisplayer.getDefault().setStatusText("F2 for Search");
    }//GEN-LAST:event_itemComboBoxFocusGained

    private void anotherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anotherButtonActionPerformed
        TopComponent win = new POSTopComponent();
        win.open();
        win.requestActive();
    }//GEN-LAST:event_anotherButtonActionPerformed

    private void lastInvoiceNumberFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastInvoiceNumberFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lastInvoiceNumberFieldActionPerformed

    private void totalAmountFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalAmountFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalAmountFieldActionPerformed

    private void totalDiscountFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_totalDiscountFieldKeyPressed
        if (evt.getKeyCode() == 192 || evt.getKeyCode() == KeyEvent.VK_ADD || evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            paidAmountField.requestFocus();
            paidAmountField.selectAll();
        }
    }//GEN-LAST:event_totalDiscountFieldKeyPressed

    private void searchItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchItemButtonActionPerformed
        searchItem("");
    }//GEN-LAST:event_searchItemButtonActionPerformed

    private void totalDiscountFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_totalDiscountFieldFocusLost
////        calcDiscount();
//        if (totalDiscountField.getText().equalsIgnoreCase("+")) {
//            totalDiscountField.setText("0.0");
//        }
    }//GEN-LAST:event_totalDiscountFieldFocusLost

    private void paidAmountFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_paidAmountFieldFocusGained
        if (paidAmountField.getText().equalsIgnoreCase("+")) {
            paidAmountField.setText("");
        }
    }//GEN-LAST:event_paidAmountFieldFocusGained

    private void invoiceNumberFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_invoiceNumberFieldMouseClicked

    }//GEN-LAST:event_invoiceNumberFieldMouseClicked

    private void employeeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeComboBoxActionPerformed

    }//GEN-LAST:event_employeeComboBoxActionPerformed
    int enterCount = 0;
    private void employeeComboBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_employeeComboBoxKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            Config forceEmployeeSelectionConfig = manager.find(Config.class, "forceEmployeeSelection");
            boolean forceEmployeeSelection = (forceEmployeeSelectionConfig != null && forceEmployeeSelectionConfig.getConfigValue().equalsIgnoreCase("true"));
            if (forceEmployeeSelection && employeeComboBox.getSelectedIndex() < 0) {
                return;
            }
//            enterCount++;
//            if (enterCount < 2) {
//                return;
//            }
            for (int i = 0; i < table.getRowCount(); i++) {
                if (Double.parseDouble(table.getValueAt(i, 6).toString()) > 0) {
                    paidAmountField.requestFocus();
                    paidAmountField.selectAll();
                    return;
                }
            }
            discountPercentageField.requestFocus();
            discountPercentageField.selectAll();
            enterCount = 0;
        }
    }//GEN-LAST:event_employeeComboBoxKeyPressed

    private void itemComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemComboBoxMouseClicked
//        showNotification("Refreshed", "Items Refreshed");
//        JPopupMenu jPopupMenu = new JPopupMenu("Refresh");
//        jPopupMenu.add(new JMenuItem("Click Me!"));
//        jPopupMenu.show(itemComboBox, itemComboBox.getX(), itemComboBox.getY());

    }//GEN-LAST:event_itemComboBoxMouseClicked

    private void employeeComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_employeeComboBoxMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON3) {
            Combo.fillEmployees(employeeComboBox);
            showNotification("Refreshed", "Employee list Refreshed");
//            JPopupMenu jPopupMenu = new JPopupMenu("Refresh");
//            jPopupMenu.add(new JMenuItem("Click Me!"));
//            jPopupMenu.show(employeeComboBox, employeeComboBox.getX(), employeeComboBox.getY());
        }

    }//GEN-LAST:event_employeeComboBoxMouseClicked

    private void saleInvoiceComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saleInvoiceComboBoxActionPerformed
        fillInvoice(saleInvoiceComboBox.getSelectedItem().toString());
    }//GEN-LAST:event_saleInvoiceComboBoxActionPerformed

    private void paidByCCFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paidByCCFieldActionPerformed
        paidAmountField.requestFocus();
    }//GEN-LAST:event_paidByCCFieldActionPerformed

    private void paidByCCFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_paidByCCFieldFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_paidByCCFieldFocusGained

    private void paidByCCFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paidByCCFieldKeyReleased
        calcRemaining();
    }//GEN-LAST:event_paidByCCFieldKeyReleased

    private void quotationCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quotationCheckBoxActionPerformed
        quotationUI(quotationCheckBox.isSelected());
        if (quotationCheckBox.isSelected()) {

        }
    }//GEN-LAST:event_quotationCheckBoxActionPerformed

    private void cashBoxComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cashBoxComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cashBoxComboBoxActionPerformed

    private void invoiceCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invoiceCheckBoxActionPerformed
        boolean isManualInvoice = invoiceCheckBox.isSelected();
        invoiceNumberField.setEditable(isManualInvoice);
        invoiceNumberField.setText(isManualInvoice ? "" : "AUTO");
    }//GEN-LAST:event_invoiceCheckBoxActionPerformed

    private void invoiceNumberFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_invoiceNumberFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F2) {
            searchInvoice();
        }
    }//GEN-LAST:event_invoiceNumberFieldKeyPressed

    private void discountPercentageFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_discountPercentageFieldKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_discountPercentageFieldKeyReleased

    private void discountPercentageFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_discountPercentageFieldKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_discountPercentageFieldKeyPressed

    private void discountPercentageFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discountPercentageFieldActionPerformed
        calcDiscount();
    }//GEN-LAST:event_discountPercentageFieldActionPerformed

    private void discountPercentageFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_discountPercentageFieldFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_discountPercentageFieldFocusLost

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton anotherButton;
    private javax.swing.JComboBox cashBoxComboBox;
    private javax.swing.JButton clearButton;
    private javax.swing.JComboBox<Customer> customerComboBox;
    private javax.swing.JPanel customerPanel;
    private org.jdesktop.swingx.JXDatePicker datePicker;
    private javax.swing.JTextField discountField;
    private javax.swing.JTextField discountPercentageField;
    private javax.swing.JComboBox employeeComboBox;
    private javax.swing.JCheckBox invoiceCheckBox;
    private javax.swing.JTextField invoiceNumberField;
    private javax.swing.JPanel invoicePanel;
    private javax.swing.JComboBox<Item> itemComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lastInvoiceNumberField;
    private javax.swing.JTextField paidAmountField;
    private javax.swing.JLabel paidAmountLabel;
    private javax.swing.JTextField paidByCCField;
    private javax.swing.JLabel paidByCCLabel;
    private javax.swing.JLabel paidByCCLabel1;
    private javax.swing.JTextField priceField;
    private javax.swing.JCheckBox printCheckBox;
    private javax.swing.JButton processButton;
    private javax.swing.JTextField quantityField;
    private javax.swing.JLabel quantityLabel;
    private javax.swing.JCheckBox quotationCheckBox;
    private javax.swing.JTextField receiptNumberField;
    private javax.swing.JPanel receiptPanel;
    private javax.swing.JTextField remainingAmountField;
    private javax.swing.JLabel remainingAmountLabel;
    private javax.swing.JComboBox saleInvoiceComboBox;
    private javax.swing.JButton searchCustomerButton;
    private javax.swing.JButton searchItemButton;
    private javax.swing.JTable table;
    private javax.swing.JTextField totalAmountField;
    private javax.swing.JTextField totalDiscountField;
    // End of variables declaration//GEN-END:variables
    DefaultTableModel tableModel;
//    private final DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();

    private void onLoad() {
        initComponents();
        optionalComponents.add(receiptPanel);
        optionalComponents.add(employeeComboBox);
        optionalComponents.add(invoicePanel);
        optionalComponents.add(customerPanel);
        optionalComponents.add(quantityLabel);
//        setVisible(true);
        AutoCompleteDecorator.decorate(itemComboBox);
        setComboBoxKeyAdapters(itemComboBox);
        datePicker.setFormats(yyyy_MM_dd);
//        KeyAdapter();
        tableModel = (DefaultTableModel) table.getModel();
        table.setDefaultRenderer(Object.class, coloredCellRenderer);
    }

    private void setComboBoxKeyAdapters(JComboBox<? extends Object> comboBox) {
        String compName = comboBox.getName();
        Component component[] = comboBox.getComponents();
        for (Component component1 : component) {
            if (compName.equals("itemComboBox")) {
                component1.addKeyListener(itemComboBoxKeyAdapter);
            }
        }
    }
    KeyAdapter itemComboBoxKeyAdapter = new java.awt.event.KeyAdapter() {
        @Override
        public void keyPressed(KeyEvent evt) {
            itemComboBoxKeyPressed(evt);
        }
    };

    private void clear() {
        tableModel.setRowCount(0);
        fillCombo();
//        itemComboBoxWorker.execute();
        clearFields();
        datePicker.setDate(new Date());
    }

    private void clearFields() {
        invoiceNumberField.setText(invoiceCheckBox.isSelected() ? "" : "AUTO");//Data.getInvoiceNo()
        quantityField.setText("");
        priceField.setText("");
        quantityLabel.setText("");
        discountField.setText("");
        totalAmountField.setText("");
        totalDiscountField.setText("");
        paidAmountField.setText("");
        paidByCCField.setText("");
        remainingAmountField.setText("");
        discountPercentageField.setText("");
        itemComboBox.requestFocus();
        employeeComboBox.setSelectedItem(null);
//        receiptNumberField.setText(Data.getReceiptNo());
    }
    double totalAmount = 0;

    private void calcTotal() {
        totalAmount = 0;
        double totalDiscount = 0;
        for (int i = 0; i < table.getRowCount(); i++) {
            totalAmount += Double.valueOf(table.getValueAt(i, 8).toString());
            totalDiscount += Double.valueOf(table.getValueAt(i, 6).toString());
        }
        totalAmountField.setText(nf2d.format(totalAmount));
        totalDiscountField.setText(nf2d.format(totalDiscount));
        String paidText = paidAmountField.getText();
        if (paidText.equals("")) {
            paidAmountField.setText("0");
            remainingAmountField.setText(nf2d.format(totalAmount));
        }
        calcRemaining();
        rowNumbers();
    }

    private void calcRemaining() {
        String totalAmountText = totalAmountField.getText().trim();
        String paidByCCText = paidByCCField.getText().trim();
        totalAmountText = totalAmountText.equals("") ? "0" : totalAmountText;
        String paidAmountText = paidAmountField.getText().trim();
        paidAmountText = paidAmountText.equals("") ? "0" : paidAmountText;
        double totalAmount1 = 0, paidAmount = 0, paidByCC = 0, remainingAmount;
        try {
            totalAmount1 = Double.parseDouble(totalAmountText);
        } catch (NumberFormatException e) {
        }
//        if (totalAmount1 == 0) {
//            return;
//        }
        try {
            paidAmount = Double.parseDouble(paidAmountText);
        } catch (NumberFormatException e) {
        }
        try {
            paidByCC = Double.parseDouble(paidByCCText);
        } catch (NumberFormatException e) {
        }
        remainingAmount = totalAmount1 - (paidAmount + paidByCC);
        remainingAmountField.setText(nf2d.format(remainingAmount));
    }

    private void addToTable() {
        double quantity = 0;
        double price = 0;
        double discount = 0;
        double net;
        Item item = (Item) itemComboBox.getSelectedItem();
        if (item == null) {
            return;
        }
        String code = item.getCode();
        String description = item.getDescription();
        double availableQuantity = 0.0;
        try {
            availableQuantity = FindMySql.quantityByItemCode(item.getCode());
            quantity = Double.valueOf(quantityField.getText());
            price = Double.valueOf(priceField.getText().trim());
            discount = Double.valueOf(discountField.getText().trim());
        } catch (NumberFormatException e) {
        }
        if (quantity == 0) {
            showError("Quantity Required");
            return;
        }
        for (int i = 0; i < table.getRowCount(); i++) {

            if (description.equalsIgnoreCase("OTHER")) {
                break;
            }
            if (code.equals(table.getValueAt(i, 1))) {
                quantity = quantity + Double.parseDouble(table.getValueAt(i, 4).toString());
                tableModel.removeRow(i);
                break;

            }
        }
        item = manager.find(Item.class, item.getCode());

        if (quantity > availableQuantity) {
            showError("Out of stock!");

//            int option = JOptionPane.showConfirmDialog(null, "Change Stock?", "Quantity Not Enough", JOptionPane.OK_CANCEL_OPTION);
//            if (option == JOptionPane.OK_OPTION) {
//                String newQuantityString = JOptionPane.showInputDialog("Stock for " + item.getCode() + " " + item.getDescription());
//                try {
//                    double newQuantity = Double.parseDouble(newQuantityString);
//                    Stock stock = manager.find(Stock.class, item.getCode());
//                    stock.setQuantity(newQuantity);
//                    manager.update(stock);
//                } catch (NumberFormatException numberFormatException) {
//                }
//            }
//
//            return;
        }

//        if (price == 0) {
//            setStatusMessage("Price Required", Color.RED);
//            showError("Price Required");
//            return;
//        }
        net = price * quantity;
        double discountAmount = net * discount / 100;
        double amount = net - discountAmount;
//        int i = dtm.getRowCount();
        Object[] rowData = {"",
            code,
            item.getDescription(),
            nf2d.format(price),
            nf3d.format(quantity),
            nf2d.format(net),
            nf2d.format(discountAmount),
            nf2d.format(discount),
            nf2d.format(amount)};

        tableModel.addRow(rowData);

        quantityField.setText("");
        priceField.setText("");
        quantityLabel.setText("");
        discountField.setText("");
        itemComboBox.setSelectedItem("");
        calcTotal();
    }

    @Override
    public void setVisible(boolean b) {
        super.setVisible(b);
//        Rectangle rectangle = GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds();
//        setBounds(0, 50, rectangle.width, rectangle.height - 50);
        fillCombo();
//        Combo.fillItems(itemComboBox);
//        customerComboBox.requestFocus();
        itemComboBox.requestFocus();
    }

    private void process() {
        int rowCount = table.getRowCount();
        if (rowCount == 0) {
            return;
        }

        if (quotationCheckBox.isSelected()) {
            processQuotation();
        } else {
            processInvoice();

        }
    }

    private void substractDiscount() {
        String totalDiscountText = totalDiscountField.getText().trim();
        double totalDiscount;
        try {
            totalDiscount = Double.parseDouble(totalDiscountText);
        } catch (NumberFormatException numberFormatException) {
            totalDiscount = 0;
        }
        totalAmountField.setText(nf2d.format(totalAmount - totalDiscount));
    }

    @Override
    public void componentOpened() {
        customerComboBox.requestFocus();
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private void searchCustomer() {
        SearchCustomerDialog searchCustomerDialog = new SearchCustomerDialog(null, true);
        Customer customer = searchCustomerDialog.getCustomer();
        if (customer != null) {
            customerComboBox.setSelectedItem(customer);
            itemComboBox.requestFocus();
        } else {
            customerComboBox.requestFocus();
        }
    }

    private void searchItem(String c) {
        SearchItemDialog searchItemDialog = new SearchItemDialog(null, true, c + "");
        Item item = searchItemDialog.getItem();
        if (item != null) {
            itemComboBox.setSelectedItem(item);
            quantityField.requestFocus();
        } else {
            itemComboBox.requestFocus();
        }
    }

    private void searchInvoice() {
        SearchInvoiceDialog searchInvoiceDialog = new SearchInvoiceDialog(null, true);
        SaleInvoice saleInvoice = searchInvoiceDialog.getSaleInvoice();
        if (saleInvoice != null) {
            fillInvoice(saleInvoice);
        } else {
            clear();
        }
    }

    private void rowNumbers() {
        for (int i = 0; i < table.getRowCount(); i++) {
            table.setValueAt(i + 1, i, 0);
        }
    }

    public void fillInvoice(String invoiceNumber) {
        SaleInvoice saleInvoice = manager.find(SaleInvoice.class, invoiceNumber);
        fillInvoice(saleInvoice);
    }

    public void fillInvoice(SaleInvoice saleInvoice) {
        if (saleInvoice != null) {
            invoiceNumberField.setText(saleInvoice.getInvNo());
            datePicker.setDate(saleInvoice.getInvTime());
            customerComboBox.setSelectedItem(saleInvoice.getCustomer());
            employeeComboBox.setSelectedItem(saleInvoice.getEmployee());
            totalAmountField.setText(nf2d.format(saleInvoice.getAmount()));
            totalDiscountField.setText(nf2d.format(saleInvoice.getDiscount()));
            double paidAmount = saleInvoice.getReceivedAmount() != null ? saleInvoice.getReceivedAmount() : saleInvoice.getAmount();
            paidAmountField.setText(nf2d.format(paidAmount));
            double paidByCC = saleInvoice.getPaidByCreditCard() != null ? saleInvoice.getPaidByCreditCard() : 0.0;
            paidByCCField.setText(nf2d.format(paidByCC));
            remainingAmountField.setText(nf2d.format(saleInvoice.getAmount() - (paidAmount + paidByCC)));
            Collection<SaleInvoiceHasItem> saleInvoiceHasItems = saleInvoice.getSaleInvoiceHasItemCollection();
            tableModel.setRowCount(0);
            int r = 0;
            for (SaleInvoiceHasItem saleInvoiceHasItem : saleInvoiceHasItems) {
                double rate = saleInvoiceHasItem.getRate();
                double quantity = saleInvoiceHasItem.getQuantity();
                double net = rate * quantity;
                double discount = saleInvoiceHasItem.getDiscount();
                double amount = net - discount;

                Object[] row = {
                    nf3p.format(++r),
                    saleInvoiceHasItem.getItem().getCode(),
                    saleInvoiceHasItem.getItem().getDescription(),
                    nf2d.format(rate),
                    nf2d.format(quantity),
                    nf2d.format(net),
                    nf2d.format(discount),
                    nf2d.format(discount / amount * 100),
                    nf2d.format(amount)

                };
                tableModel.addRow(row);
            }
        }
    }

    public void fillQuotation(Quotation quotation) {
        if (quotation != null) {
            invoiceNumberField.setText("AUTO");
            datePicker.setDate(new Date());
            customerComboBox.setSelectedItem(quotation.getCustomer());
            employeeComboBox.setSelectedItem(quotation.getEmployeeCode());
            totalAmountField.setText(nf2d.format(quotation.getAmount()));
            totalDiscountField.setText(nf2d.format(quotation.getDiscount()));
//            double paidAmount = quotation.getReceivedAmount() != null ? quotation.getReceivedAmount() : quotation.getAmount();
            paidAmountField.setText(nf2d.format(0));
//            double paidByCC = quotation.getPaidByCreditCard() != null ? quotation.getPaidByCreditCard() : 0.0;
            paidByCCField.setText(nf2d.format(0));
            remainingAmountField.setText(nf2d.format(quotation.getAmount()));
            Collection<QuotationHasItem> quotationHasItems = quotation.getQuotationHasItemCollection();
            tableModel.setRowCount(0);
            int r = 0;
            for (QuotationHasItem saleInvoiceHasItem : quotationHasItems) {
                double rate = saleInvoiceHasItem.getRate();
                double quantity = saleInvoiceHasItem.getQuantity();
                double net = rate * quantity;
                double discount = saleInvoiceHasItem.getDiscount();
                double amount = net - discount;

                Object[] row = {
                    nf3p.format(++r),
                    saleInvoiceHasItem.getItem().getCode(),
                    saleInvoiceHasItem.getItem().getDescription(),
                    nf2d.format(rate),
                    nf2d.format(quantity),
                    nf2d.format(net),
                    nf2d.format(discount),
                    nf2d.format(discount / amount * 100),
                    nf2d.format(amount)

                };
                tableModel.addRow(row);
            }
        }
    }

    private void removeOldItems(List<SaleInvoiceHasItem> saleInvoiceHasItemCollection) {
        List<Serializable> toEdit = new ArrayList<>();
        for (SaleInvoiceHasItem saleInvoiceHasItem : saleInvoiceHasItemCollection) {
            Stock stock = saleInvoiceHasItem.getItem().getStock();
            stock.setQuantity(stock.getQuantity() + saleInvoiceHasItem.getQuantity());
            toEdit.add(stock);
        }
        manager.update(toEdit);
        manager.delete(saleInvoiceHasItemCollection);
    }

    /**
     * @return the optionalComponents
     */
    public ArrayList<JComponent> getOptionalComponents() {
        return optionalComponents;
    }

    private void fillCombo() {
        Combo.fillCustomers(customerComboBox);
        Combo.fillSaleInvoice(saleInvoiceComboBox, null);
        Combo.fillCashBoxes(cashBoxComboBox);
        Combo.fillEmployees(employeeComboBox);
//        Combo.fillItems(itemComboBox);
//
//        List<SaleInvoice> saleInvoices = manager.findLimit(SaleInvoice.class, 10);
//        System.out.println("Thilina - Size : " + saleInvoices.size());
//        SaleInvoice[] saleInvoicesArray = new SaleInvoice[saleInvoices.size()];
//        saleInvoices.toArray(saleInvoicesArray);
//        Comparator<SaleInvoice> comparator = new Comparator<SaleInvoice>() {
//
//            @Override
//            public int compare(SaleInvoice o1, SaleInvoice o2) {
//                Date o2Date = o2.getInvTime() == null ? new Date() : o2.getInvTime();
//                return o2Date.compareTo(o1.getInvTime() == null ? new Date() : o1.getInvTime());
//            }
//        };
//        Arrays.sort(saleInvoicesArray, comparator);
//        saleInvoiceComboBox.setModel(new DefaultComboBoxModel(saleInvoicesArray));
    }

    private void quotationUI(boolean selected) {
        quotationCheckBox.setBackground(Color.YELLOW);
        quotationCheckBox.setForeground(Color.red);
        invoiceNumberField.setVisible(!selected);
        invoiceCheckBox.setVisible(!selected);
        paidAmountField.setVisible(!selected);
        paidAmountLabel.setVisible(!selected);
        paidByCCField.setVisible(!selected);
        paidByCCLabel.setVisible(!selected);
        remainingAmountField.setVisible(!selected);
        remainingAmountLabel.setVisible(!selected);

    }

    private void processQuotation() {

        Date date = datePicker.getDate();
        String today = yyyy_MM_dd.format(new Date());
        String quotationDay = yyyy_MM_dd.format(date);
        if (date == null) {
            datePicker.requestFocus();
            return;
        } else if (quotationDay.equals(today)) {
            date = new Date();
        }

        String totalAmountText = totalAmountField.getText().trim();
        String totalDiscountText = totalDiscountField.getText().trim();
        totalDiscountText = totalDiscountText.equals("") ? "0" : totalDiscountText;
        double discount;
        try {
            discount = Double.parseDouble(totalDiscountText);
        } catch (NumberFormatException e) {
            showError("Invalid Amount");
            return;
        }

        double amount = Double.valueOf(totalAmountText);

        Customer customer = (Customer) customerComboBox.getSelectedItem();
        System.currentTimeMillis();
        String quotationId = System.currentTimeMillis() + "";
        Quotation quotation = new Quotation(quotationId);

        quotation.setCustomer(customer);
        quotation.setCustomerName(customer.getName());
        quotation.setAmount(amount);
        quotation.setDiscount(discount);
        quotation.setQuotationTime(date);
        Object o = employeeComboBox.getSelectedItem();
        Employee employee = o instanceof Employee ? (Employee) o : Data.getOperator().getEmployee();
        quotation.setOperator(Data.getOperator().getUsername());
        quotation.setEmployeeCode(employee == null ? "000" : employee.getCode());

        List<Serializable> serializables = new ArrayList<>();
        int temp = 0;

        for (int i = 0; i < table.getRowCount(); i++) {
            String code = table.getValueAt(i, 1).toString();
            double quantity = Double.valueOf(table.getValueAt(i, 4).toString());
            double rate = Double.valueOf(table.getValueAt(i, 3).toString());
            double itemDiscount = Double.valueOf(table.getValueAt(i, 6).toString());
            Item item;
            if (code.equalsIgnoreCase("00")) {
                String tempCode = "TEMP" + ++temp;
                item = new Item(tempCode);
                item.setDescription("OTHER");
                Stock stock = new Stock(tempCode);
                stock.setQuantity(quantity);
                item.setStock(stock);
//                serializables.add(stock);
                PriceList priceList = new PriceList(tempCode);
                priceList.setSellingPack(rate);
                priceList.setCostPack(0.0);
                item.setPriceList(priceList);
//                serializables.add(priceList);

            } else {
                item = manager.find(Item.class, code);
            }
//            QuotationHasItemPK quotationHasItemPK = new QuotationHasItemPK(quotation.getQuotationNo(), item.getCode());
            QuotationHasItem quotationHasItem = new QuotationHasItem(quotation.getQuotationNo(), item.getCode());
            quotationHasItem.setQuotation(quotation);
            quotationHasItem.setQuantity(quantity);
            quotationHasItem.setDiscount(itemDiscount);
            if (item.getStock() == null) {
                return;
            }
            quotationHasItem.setItem(item);
            PriceList priceList = item.getPriceList();
            quotationHasItem.setCost(priceList.getCostPack());
            quotationHasItem.setRate(rate);
            priceList.setSellingPack(rate);
            serializables.add(priceList);
            serializables.add(quotationHasItem);
        }
        serializables.add(quotation);

        if (manager.update(serializables)) {
//            SaleInvoicePaymentView.getInstance().fill(saleInvoice);
//            SaleInvoicePaymentView.display();
//            if (printCheckBox.isSelected()) {
//                try {
//                    URL url = getClass().getResource("/com/nanos/nbiz/pos/jrxml/PosInvoice.jasper");
//                    Object object = JRLoader.loadObject(url);//"src/com/nanosl/nbiz/gui/jrxml/report1.jasper"
//                    if (object == null) {
//                        showError("Unable to print");
//                        return;
//                    }
//                    JasperReport report = (JasperReport) object;
//                    Map<String, Object> params = Data.getParams();
//                    params.put("invoice", invoiceNumber);
//                    Printer.printPosInvoice(report, params);
//                } catch (JRException ex) {
//                    Exceptions.printStackTrace(ex);
//                }
//            }
            if (printCheckBox.isSelected()) {
                printPOS(quotationId);
            }
            showSuccess("Quotation Updated");

            clear();
        } else {
            showError("Update failed");
        }

    }

    private void processInvoice() {
        String invoiceNumber = invoiceNumberField.getText();
        boolean edit = false;
        SaleInvoice saleInvoice = null;
        boolean isManualInvoice = invoiceCheckBox.isSelected();
        if (!invoiceNumber.equalsIgnoreCase("AUTO")) {
            saleInvoice = manager.find(SaleInvoice.class, invoiceNumber);
            if (saleInvoice != null) {
                int option = JOptionPane.showConfirmDialog(null, "Sure to edit Invoice: " + invoiceNumber + " ?", "Edit " + invoiceNumber, JOptionPane.OK_CANCEL_OPTION);
                if (option == JOptionPane.OK_OPTION) {
                    edit = true;
                    removeOldItems((List<SaleInvoiceHasItem>) saleInvoice.getSaleInvoiceHasItemCollection());
                } else {
                    return;
                }
            }
        }
        invoiceNumber = edit ? invoiceNumber : isManualInvoice ? invoiceNumber : Data.getInvoiceNo();
        String ReceiptNumber = Data.getReceiptNo();
        if (invoiceNumber.equals("")) {
            invoiceNumberField.requestFocus();
            return;
        }
        Date date = datePicker.getDate();
        String today = yyyy_MM_dd.format(new Date());
        String invoiceDay = yyyy_MM_dd.format(date);
        if (date == null) {
            datePicker.requestFocus();
            return;
        } else if (invoiceDay.equals(today)) {
            date = new Date();
        } else {
            String[] choices = {"Yes", "No"};
            int option = JOptionPane.showOptionDialog(datePicker, "Is this a time travel ???", "Sure?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, choices, "No");
//            int option = JOptionPane.showConfirmDialog(datePicker, "Is this a time travel ???", "Sure?", JOptionPane.YES_NO_OPTION);
            if (option != 0) {
                return;
            }
        }

        String totalAmountText = totalAmountField.getText().trim();
        String remainingAmountText = remainingAmountField.getText().trim();
        String totalDiscountText = totalDiscountField.getText().trim();
        totalDiscountText = totalDiscountText.equals("") ? "0" : totalDiscountText;
        double discount;
        try {
            discount = Double.parseDouble(totalDiscountText);
        } catch (NumberFormatException e) {
            showError("Invalid Amount");
            return;
        }

        String paidAmountText = paidAmountField.getText().trim();
        paidAmountText = paidAmountText.equals("") ? "0" : paidAmountText;
        String paidByCCText = paidByCCField.getText().trim();
        paidByCCText = paidByCCText.equals("") ? "0" : paidByCCText;

        double amount = Double.valueOf(totalAmountText);
        double credit = Double.valueOf(remainingAmountText);

        Customer customer = (Customer) customerComboBox.getSelectedItem();
        String customerName;
        if (paidAmountText.equalsIgnoreCase("FREE")) {
            paidAmountText = "0.0";
            amount = 0;
            customerName = "FREE";
        } else if (customer == null) {
            if (credit > 0) {
                showError("No Customer for credit");
                return;
            }
            customerName = JOptionPane.showInputDialog("Customer Name");
        } else if (customer.getCode().equals("000") || customer.getCode().equalsIgnoreCase("CASH")) {
            if (credit > 0) {
                showError("No Customer for credit");
                return;
            }
            customerName = JOptionPane.showInputDialog("Customer Name");
        } else {
            Person person = customer.getPerson();

            customerName = person != null ? person.getName() : "";
        }
        double receivedAmount, paidByCC;
        try {
            receivedAmount = Double.parseDouble(paidAmountText);
        } catch (NumberFormatException e) {
            showError("Invalid Amount");
            paidAmountField.selectAll();
            return;
        }
        try {
            paidByCC = Double.parseDouble(paidByCCText);
        } catch (NumberFormatException e) {
            showError("Invalid Amount");
            paidByCCField.selectAll();
            return;
        }
        double totalReceivedAmount = receivedAmount + paidByCC;
        double initialPayment = totalReceivedAmount > amount ? amount : totalReceivedAmount;
//        double discount = Double.valueOf(totalDiscountText);
        saleInvoice = saleInvoice == null ? new SaleInvoice(invoiceNumber) : saleInvoice;
        if (customer != null) {
            customer.setCredit(customer.getCredit() + credit);
        } else {
            customer = new Customer("000");
        }
        saleInvoice.setCustomer(customer);
        saleInvoice.setCustomerName(customerName);
        saleInvoice.setAmount(amount);
        saleInvoice.setCredit(credit);
        saleInvoice.setDiscount(discount);
        saleInvoice.setInvTime(edit ? saleInvoice.getInvTime() : date);
//        saleInvoice.setReceivedAmount(0.0);
        saleInvoice.setReceivedAmount(totalReceivedAmount);
        saleInvoice.setPaidByCreditCard(paidByCC);
        saleInvoice.setInitialPayment(initialPayment);
        Object o = employeeComboBox.getSelectedItem();
        Employee employee = o instanceof Employee ? (Employee) o : Data.getOperator().getEmployee();
        saleInvoice.setOperator(Data.getOperator().getUsername());
        saleInvoice.setEmployee(employee);
        List<Serializable> serializables = new ArrayList<>();
        int temp = 0;

        for (int i = 0; i < table.getRowCount(); i++) {
            String code = table.getValueAt(i, 1).toString();
            double quantity = Double.valueOf(table.getValueAt(i, 4).toString());
            double rate = Double.valueOf(table.getValueAt(i, 3).toString());
            double itemDiscount = Double.valueOf(table.getValueAt(i, 6).toString());
            Item item;
            if (code.equalsIgnoreCase("00")) {
                String tempCode = "TEMP" + ++temp;
                item = new Item(tempCode);
                item.setDescription("OTHER");
                Stock stock = new Stock(tempCode);
                stock.setQuantity(quantity);
                item.setStock(stock);
//                serializables.add(stock);
                PriceList priceList = new PriceList(tempCode);
                priceList.setSellingPack(rate);
                priceList.setCostPack(0.0);
                item.setPriceList(priceList);
//                serializables.add(priceList);

            } else {
                item = manager.find(Item.class, code);
            }
            SaleInvoiceHasItemPK saleInvoiceHasItemPK = new SaleInvoiceHasItemPK(invoiceNumber, item.getCode());
            SaleInvoiceHasItem sihi = new SaleInvoiceHasItem(saleInvoiceHasItemPK);
//            if (edit) {
//                sihi = manager.find(SaleInvoiceHasItem.class, saleInvoiceHasItemPK);
//                if (sihi != null) {
//                    double oldQuantity = sihi.getQuantity();
//                    double oldCost = sihi.getCost();
//                    double oldDiscount = sihi.getDiscount();
//                    double oldRate = sihi.getRate();
//                    double deference = oldQuantity - quantity;
//
//                } else {
//                    sihi = new SaleInvoiceHasItem(saleInvoiceHasItemPK);
//                }
//            } else {
//                sihi = new SaleInvoiceHasItem(saleInvoiceHasItemPK);
//            }
            sihi.setSaleInvoice(saleInvoice);
            sihi.setQuantity(quantity);
            sihi.setDiscount(itemDiscount);
            if (item.getStock() == null) {
                return;
            }
            Stock stock = item.getStock();
            quantity = stock.getQuantity() - quantity;
            stock.setQuantity(quantity);
            sihi.setItem(item);
            PriceList priceList = item.getPriceList();
            sihi.setCost(priceList.getCostPack());
            sihi.setRate(rate);
            priceList.setSellingPack(rate);
            serializables.add(priceList);
            serializables.add(sihi);
            serializables.add(stock);
        }
        serializables.add(saleInvoice);
        serializables.add(customer);

        CashBox cashBox = (CashBox) cashBoxComboBox.getSelectedItem();
        if (cashBox == null) {
            cashBox = new CashBox("001");
            cashBox.setBalance(0.0);
            cashBox.setDescription("Cash Box 001");
            serializables.add(cashBox);
        } else {
            cashBox = manager.find(CashBox.class, cashBox.getId());
        }
        double actualReceivedAmount = receivedAmount > amount ? amount : receivedAmount;
        double oldBalance = cashBox.getBalance();
        cashBox.setBalance(oldBalance + actualReceivedAmount);
        CashLog cashLog = new CashLog(new Date(), cashBox.getId());
        cashLog.setAmount(actualReceivedAmount);
        cashLog.setCashBox(cashBox);
        cashLog.setBoxBalance(oldBalance);
        cashLog.setEntity(SaleInvoice.class.getName());
        cashLog.setEntityId(Convert.toBytes(saleInvoice.getInvNo()));
        serializables.add(cashBox);
        serializables.add(cashLog);

        if (totalReceivedAmount > 0) {
            if (ReceiptNumber.equals("")) {
                showError("Recipt Number Required!");
                return;
            }
            CollectionReceipt collectionReceipt = new CollectionReceipt(ReceiptNumber);
            collectionReceipt.setCollectedTime(date);
            collectionReceipt.setSaleInvoice(saleInvoice);
            collectionReceipt.setAmount(totalReceivedAmount);
            collectionReceipt.setCustomer(customer);
            SaleCash saleCash = new SaleCash(ReceiptNumber);
            saleCash.setAmount(totalReceivedAmount);
            saleCash.setCollectionReceipt(collectionReceipt);
            collectionReceipt.setSaleCash(saleCash);
            saleInvoice.setReceivedAmount(totalReceivedAmount);
            serializables.add(saleCash);
            serializables.add(collectionReceipt);
        }

        if (manager.update(serializables)) {
//            SaleInvoicePaymentView.getInstance().fill(saleInvoice);
//            SaleInvoicePaymentView.display();
            if (printCheckBox.isSelected()) {
                printPOS(invoiceNumber);
            }
            showSuccess("Invoice Updated");//: " + invoiceNumber + "
            if (!edit) {
                Data.setInvoiceNo(invoiceNumber);
                Data.setReceiptNo(ReceiptNumber);
            }
            clear();
            lastInvoiceNumberField.setText(invoiceNumber);
//            com.nanosl.nbiz.util.Data.updateSales(); 
        } else {
            showError("Update failed");
        }
    }

    private void calcDiscount() {
//        calcTotal();
        String discountPercentageText = discountPercentageField.getText().trim();
        String totalDiscountText = totalDiscountField.getText().trim();
        double discountPercentage, totalDiscount;
        if (!discountPercentageText.isEmpty()) {
            try {
                discountPercentage = Double.parseDouble(discountPercentageText);
                totalDiscount = totalAmount / 100 * discountPercentage;
                totalDiscountField.setText(totalDiscount + "");
            } catch (NumberFormatException numberFormatException) {
                totalDiscount = 0;
            }
        } else {
            try {
                totalDiscount = Double.parseDouble(totalDiscountText);
            } catch (NumberFormatException numberFormatException) {
                totalDiscount = 0;
            }

        }
        totalAmountField.setText(nf2d.format(totalAmount - totalDiscount));
        calcRemaining();
        totalDiscountField.requestFocus();
        totalDiscountField.selectAll();
    }

    private void printPOS(String invoiceOrQuotationId) {
        try {
            URL url = getClass().getResource("/com/nanos/nbiz/pos/jrxml/PosInvoiceMin.jasper");
            Object object = JRLoader.loadObject(url);//"src/com/nanosl/nbiz/gui/jrxml/report1.jasper"
            if (object == null) {
                showError("Unable to print");
                return;
            }

            Config config = manager.find(Config.class, "MinPos");
            boolean minPosStatus = (config != null && config.getConfigValue().equalsIgnoreCase("true"));
            JasperReport report = (JasperReport) object;
            Map<String, Object> params = Data.getParams();
            if (quotationCheckBox.isSelected()) {
                params.put("quotation", invoiceOrQuotationId);
            } else {
                params.put("invoice", invoiceOrQuotationId);
            }
            params.put("min", minPosStatus);//this will remove invoice date, time, number and powerd by info
            Printer.printPosInvoice(report, params);
        } catch (JRException ex) {
            Exceptions.printStackTrace(ex);
        }
    }
}
